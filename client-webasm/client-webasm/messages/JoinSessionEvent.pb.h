// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JoinSessionEvent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_JoinSessionEvent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_JoinSessionEvent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_JoinSessionEvent_2eproto OPENTERAMESSAGES_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct OPENTERAMESSAGES_EXPORT TableStruct_JoinSessionEvent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
OPENTERAMESSAGES_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_JoinSessionEvent_2eproto;
namespace opentera {
namespace protobuf {
class JoinSessionEvent;
struct JoinSessionEventDefaultTypeInternal;
OPENTERAMESSAGES_EXPORT extern JoinSessionEventDefaultTypeInternal _JoinSessionEvent_default_instance_;
}  // namespace protobuf
}  // namespace opentera
PROTOBUF_NAMESPACE_OPEN
template<> OPENTERAMESSAGES_EXPORT ::opentera::protobuf::JoinSessionEvent* Arena::CreateMaybeMessage<::opentera::protobuf::JoinSessionEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opentera {
namespace protobuf {

// ===================================================================

class OPENTERAMESSAGES_EXPORT JoinSessionEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentera.protobuf.JoinSessionEvent) */ {
 public:
  inline JoinSessionEvent() : JoinSessionEvent(nullptr) {}
  ~JoinSessionEvent() override;
  explicit constexpr JoinSessionEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinSessionEvent(const JoinSessionEvent& from);
  JoinSessionEvent(JoinSessionEvent&& from) noexcept
    : JoinSessionEvent() {
    *this = ::std::move(from);
  }

  inline JoinSessionEvent& operator=(const JoinSessionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinSessionEvent& operator=(JoinSessionEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinSessionEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinSessionEvent* internal_default_instance() {
    return reinterpret_cast<const JoinSessionEvent*>(
               &_JoinSessionEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JoinSessionEvent& a, JoinSessionEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinSessionEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinSessionEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinSessionEvent* New() const final {
    return new JoinSessionEvent();
  }

  JoinSessionEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinSessionEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinSessionEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JoinSessionEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinSessionEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentera.protobuf.JoinSessionEvent";
  }
  protected:
  explicit JoinSessionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionParticipantsFieldNumber = 4,
    kSessionUsersFieldNumber = 5,
    kSessionDevicesFieldNumber = 6,
    kSessionUrlFieldNumber = 1,
    kSessionCreatorNameFieldNumber = 2,
    kSessionUuidFieldNumber = 3,
    kJoinMsgFieldNumber = 7,
    kSessionParametersFieldNumber = 8,
    kServiceUuidFieldNumber = 9,
  };
  // repeated string session_participants = 4;
  int session_participants_size() const;
  private:
  int _internal_session_participants_size() const;
  public:
  void clear_session_participants();
  const std::string& session_participants(int index) const;
  std::string* mutable_session_participants(int index);
  void set_session_participants(int index, const std::string& value);
  void set_session_participants(int index, std::string&& value);
  void set_session_participants(int index, const char* value);
  void set_session_participants(int index, const char* value, size_t size);
  std::string* add_session_participants();
  void add_session_participants(const std::string& value);
  void add_session_participants(std::string&& value);
  void add_session_participants(const char* value);
  void add_session_participants(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& session_participants() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_session_participants();
  private:
  const std::string& _internal_session_participants(int index) const;
  std::string* _internal_add_session_participants();
  public:

  // repeated string session_users = 5;
  int session_users_size() const;
  private:
  int _internal_session_users_size() const;
  public:
  void clear_session_users();
  const std::string& session_users(int index) const;
  std::string* mutable_session_users(int index);
  void set_session_users(int index, const std::string& value);
  void set_session_users(int index, std::string&& value);
  void set_session_users(int index, const char* value);
  void set_session_users(int index, const char* value, size_t size);
  std::string* add_session_users();
  void add_session_users(const std::string& value);
  void add_session_users(std::string&& value);
  void add_session_users(const char* value);
  void add_session_users(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& session_users() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_session_users();
  private:
  const std::string& _internal_session_users(int index) const;
  std::string* _internal_add_session_users();
  public:

  // repeated string session_devices = 6;
  int session_devices_size() const;
  private:
  int _internal_session_devices_size() const;
  public:
  void clear_session_devices();
  const std::string& session_devices(int index) const;
  std::string* mutable_session_devices(int index);
  void set_session_devices(int index, const std::string& value);
  void set_session_devices(int index, std::string&& value);
  void set_session_devices(int index, const char* value);
  void set_session_devices(int index, const char* value, size_t size);
  std::string* add_session_devices();
  void add_session_devices(const std::string& value);
  void add_session_devices(std::string&& value);
  void add_session_devices(const char* value);
  void add_session_devices(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& session_devices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_session_devices();
  private:
  const std::string& _internal_session_devices(int index) const;
  std::string* _internal_add_session_devices();
  public:

  // string session_url = 1;
  void clear_session_url();
  const std::string& session_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_session_url();
  void set_allocated_session_url(std::string* session_url);
  private:
  const std::string& _internal_session_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_url(const std::string& value);
  std::string* _internal_mutable_session_url();
  public:

  // string session_creator_name = 2;
  void clear_session_creator_name();
  const std::string& session_creator_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_creator_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_creator_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_session_creator_name();
  void set_allocated_session_creator_name(std::string* session_creator_name);
  private:
  const std::string& _internal_session_creator_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_creator_name(const std::string& value);
  std::string* _internal_mutable_session_creator_name();
  public:

  // string session_uuid = 3;
  void clear_session_uuid();
  const std::string& session_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_uuid();
  PROTOBUF_MUST_USE_RESULT std::string* release_session_uuid();
  void set_allocated_session_uuid(std::string* session_uuid);
  private:
  const std::string& _internal_session_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_uuid(const std::string& value);
  std::string* _internal_mutable_session_uuid();
  public:

  // string join_msg = 7;
  void clear_join_msg();
  const std::string& join_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_join_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_join_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_join_msg();
  void set_allocated_join_msg(std::string* join_msg);
  private:
  const std::string& _internal_join_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_join_msg(const std::string& value);
  std::string* _internal_mutable_join_msg();
  public:

  // string session_parameters = 8;
  void clear_session_parameters();
  const std::string& session_parameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_parameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_parameters();
  PROTOBUF_MUST_USE_RESULT std::string* release_session_parameters();
  void set_allocated_session_parameters(std::string* session_parameters);
  private:
  const std::string& _internal_session_parameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_parameters(const std::string& value);
  std::string* _internal_mutable_session_parameters();
  public:

  // string service_uuid = 9;
  void clear_service_uuid();
  const std::string& service_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_uuid();
  PROTOBUF_MUST_USE_RESULT std::string* release_service_uuid();
  void set_allocated_service_uuid(std::string* service_uuid);
  private:
  const std::string& _internal_service_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_uuid(const std::string& value);
  std::string* _internal_mutable_service_uuid();
  public:

  // @@protoc_insertion_point(class_scope:opentera.protobuf.JoinSessionEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> session_participants_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> session_users_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> session_devices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_creator_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr join_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_uuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JoinSessionEvent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JoinSessionEvent

// string session_url = 1;
inline void JoinSessionEvent::clear_session_url() {
  session_url_.ClearToEmpty();
}
inline const std::string& JoinSessionEvent::session_url() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.JoinSessionEvent.session_url)
  return _internal_session_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinSessionEvent::set_session_url(ArgT0&& arg0, ArgT... args) {
 
 session_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.JoinSessionEvent.session_url)
}
inline std::string* JoinSessionEvent::mutable_session_url() {
  std::string* _s = _internal_mutable_session_url();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.JoinSessionEvent.session_url)
  return _s;
}
inline const std::string& JoinSessionEvent::_internal_session_url() const {
  return session_url_.Get();
}
inline void JoinSessionEvent::_internal_set_session_url(const std::string& value) {
  
  session_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JoinSessionEvent::_internal_mutable_session_url() {
  
  return session_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JoinSessionEvent::release_session_url() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.JoinSessionEvent.session_url)
  return session_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JoinSessionEvent::set_allocated_session_url(std::string* session_url) {
  if (session_url != nullptr) {
    
  } else {
    
  }
  session_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.JoinSessionEvent.session_url)
}

// string session_creator_name = 2;
inline void JoinSessionEvent::clear_session_creator_name() {
  session_creator_name_.ClearToEmpty();
}
inline const std::string& JoinSessionEvent::session_creator_name() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.JoinSessionEvent.session_creator_name)
  return _internal_session_creator_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinSessionEvent::set_session_creator_name(ArgT0&& arg0, ArgT... args) {
 
 session_creator_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.JoinSessionEvent.session_creator_name)
}
inline std::string* JoinSessionEvent::mutable_session_creator_name() {
  std::string* _s = _internal_mutable_session_creator_name();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.JoinSessionEvent.session_creator_name)
  return _s;
}
inline const std::string& JoinSessionEvent::_internal_session_creator_name() const {
  return session_creator_name_.Get();
}
inline void JoinSessionEvent::_internal_set_session_creator_name(const std::string& value) {
  
  session_creator_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JoinSessionEvent::_internal_mutable_session_creator_name() {
  
  return session_creator_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JoinSessionEvent::release_session_creator_name() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.JoinSessionEvent.session_creator_name)
  return session_creator_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JoinSessionEvent::set_allocated_session_creator_name(std::string* session_creator_name) {
  if (session_creator_name != nullptr) {
    
  } else {
    
  }
  session_creator_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_creator_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.JoinSessionEvent.session_creator_name)
}

// string session_uuid = 3;
inline void JoinSessionEvent::clear_session_uuid() {
  session_uuid_.ClearToEmpty();
}
inline const std::string& JoinSessionEvent::session_uuid() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.JoinSessionEvent.session_uuid)
  return _internal_session_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinSessionEvent::set_session_uuid(ArgT0&& arg0, ArgT... args) {
 
 session_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.JoinSessionEvent.session_uuid)
}
inline std::string* JoinSessionEvent::mutable_session_uuid() {
  std::string* _s = _internal_mutable_session_uuid();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.JoinSessionEvent.session_uuid)
  return _s;
}
inline const std::string& JoinSessionEvent::_internal_session_uuid() const {
  return session_uuid_.Get();
}
inline void JoinSessionEvent::_internal_set_session_uuid(const std::string& value) {
  
  session_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JoinSessionEvent::_internal_mutable_session_uuid() {
  
  return session_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JoinSessionEvent::release_session_uuid() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.JoinSessionEvent.session_uuid)
  return session_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JoinSessionEvent::set_allocated_session_uuid(std::string* session_uuid) {
  if (session_uuid != nullptr) {
    
  } else {
    
  }
  session_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_uuid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.JoinSessionEvent.session_uuid)
}

// repeated string session_participants = 4;
inline int JoinSessionEvent::_internal_session_participants_size() const {
  return session_participants_.size();
}
inline int JoinSessionEvent::session_participants_size() const {
  return _internal_session_participants_size();
}
inline void JoinSessionEvent::clear_session_participants() {
  session_participants_.Clear();
}
inline std::string* JoinSessionEvent::add_session_participants() {
  std::string* _s = _internal_add_session_participants();
  // @@protoc_insertion_point(field_add_mutable:opentera.protobuf.JoinSessionEvent.session_participants)
  return _s;
}
inline const std::string& JoinSessionEvent::_internal_session_participants(int index) const {
  return session_participants_.Get(index);
}
inline const std::string& JoinSessionEvent::session_participants(int index) const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.JoinSessionEvent.session_participants)
  return _internal_session_participants(index);
}
inline std::string* JoinSessionEvent::mutable_session_participants(int index) {
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.JoinSessionEvent.session_participants)
  return session_participants_.Mutable(index);
}
inline void JoinSessionEvent::set_session_participants(int index, const std::string& value) {
  session_participants_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opentera.protobuf.JoinSessionEvent.session_participants)
}
inline void JoinSessionEvent::set_session_participants(int index, std::string&& value) {
  session_participants_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opentera.protobuf.JoinSessionEvent.session_participants)
}
inline void JoinSessionEvent::set_session_participants(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  session_participants_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opentera.protobuf.JoinSessionEvent.session_participants)
}
inline void JoinSessionEvent::set_session_participants(int index, const char* value, size_t size) {
  session_participants_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentera.protobuf.JoinSessionEvent.session_participants)
}
inline std::string* JoinSessionEvent::_internal_add_session_participants() {
  return session_participants_.Add();
}
inline void JoinSessionEvent::add_session_participants(const std::string& value) {
  session_participants_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opentera.protobuf.JoinSessionEvent.session_participants)
}
inline void JoinSessionEvent::add_session_participants(std::string&& value) {
  session_participants_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opentera.protobuf.JoinSessionEvent.session_participants)
}
inline void JoinSessionEvent::add_session_participants(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  session_participants_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opentera.protobuf.JoinSessionEvent.session_participants)
}
inline void JoinSessionEvent::add_session_participants(const char* value, size_t size) {
  session_participants_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opentera.protobuf.JoinSessionEvent.session_participants)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JoinSessionEvent::session_participants() const {
  // @@protoc_insertion_point(field_list:opentera.protobuf.JoinSessionEvent.session_participants)
  return session_participants_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JoinSessionEvent::mutable_session_participants() {
  // @@protoc_insertion_point(field_mutable_list:opentera.protobuf.JoinSessionEvent.session_participants)
  return &session_participants_;
}

// repeated string session_users = 5;
inline int JoinSessionEvent::_internal_session_users_size() const {
  return session_users_.size();
}
inline int JoinSessionEvent::session_users_size() const {
  return _internal_session_users_size();
}
inline void JoinSessionEvent::clear_session_users() {
  session_users_.Clear();
}
inline std::string* JoinSessionEvent::add_session_users() {
  std::string* _s = _internal_add_session_users();
  // @@protoc_insertion_point(field_add_mutable:opentera.protobuf.JoinSessionEvent.session_users)
  return _s;
}
inline const std::string& JoinSessionEvent::_internal_session_users(int index) const {
  return session_users_.Get(index);
}
inline const std::string& JoinSessionEvent::session_users(int index) const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.JoinSessionEvent.session_users)
  return _internal_session_users(index);
}
inline std::string* JoinSessionEvent::mutable_session_users(int index) {
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.JoinSessionEvent.session_users)
  return session_users_.Mutable(index);
}
inline void JoinSessionEvent::set_session_users(int index, const std::string& value) {
  session_users_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opentera.protobuf.JoinSessionEvent.session_users)
}
inline void JoinSessionEvent::set_session_users(int index, std::string&& value) {
  session_users_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opentera.protobuf.JoinSessionEvent.session_users)
}
inline void JoinSessionEvent::set_session_users(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  session_users_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opentera.protobuf.JoinSessionEvent.session_users)
}
inline void JoinSessionEvent::set_session_users(int index, const char* value, size_t size) {
  session_users_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentera.protobuf.JoinSessionEvent.session_users)
}
inline std::string* JoinSessionEvent::_internal_add_session_users() {
  return session_users_.Add();
}
inline void JoinSessionEvent::add_session_users(const std::string& value) {
  session_users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opentera.protobuf.JoinSessionEvent.session_users)
}
inline void JoinSessionEvent::add_session_users(std::string&& value) {
  session_users_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opentera.protobuf.JoinSessionEvent.session_users)
}
inline void JoinSessionEvent::add_session_users(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  session_users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opentera.protobuf.JoinSessionEvent.session_users)
}
inline void JoinSessionEvent::add_session_users(const char* value, size_t size) {
  session_users_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opentera.protobuf.JoinSessionEvent.session_users)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JoinSessionEvent::session_users() const {
  // @@protoc_insertion_point(field_list:opentera.protobuf.JoinSessionEvent.session_users)
  return session_users_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JoinSessionEvent::mutable_session_users() {
  // @@protoc_insertion_point(field_mutable_list:opentera.protobuf.JoinSessionEvent.session_users)
  return &session_users_;
}

// repeated string session_devices = 6;
inline int JoinSessionEvent::_internal_session_devices_size() const {
  return session_devices_.size();
}
inline int JoinSessionEvent::session_devices_size() const {
  return _internal_session_devices_size();
}
inline void JoinSessionEvent::clear_session_devices() {
  session_devices_.Clear();
}
inline std::string* JoinSessionEvent::add_session_devices() {
  std::string* _s = _internal_add_session_devices();
  // @@protoc_insertion_point(field_add_mutable:opentera.protobuf.JoinSessionEvent.session_devices)
  return _s;
}
inline const std::string& JoinSessionEvent::_internal_session_devices(int index) const {
  return session_devices_.Get(index);
}
inline const std::string& JoinSessionEvent::session_devices(int index) const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.JoinSessionEvent.session_devices)
  return _internal_session_devices(index);
}
inline std::string* JoinSessionEvent::mutable_session_devices(int index) {
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.JoinSessionEvent.session_devices)
  return session_devices_.Mutable(index);
}
inline void JoinSessionEvent::set_session_devices(int index, const std::string& value) {
  session_devices_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opentera.protobuf.JoinSessionEvent.session_devices)
}
inline void JoinSessionEvent::set_session_devices(int index, std::string&& value) {
  session_devices_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opentera.protobuf.JoinSessionEvent.session_devices)
}
inline void JoinSessionEvent::set_session_devices(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  session_devices_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opentera.protobuf.JoinSessionEvent.session_devices)
}
inline void JoinSessionEvent::set_session_devices(int index, const char* value, size_t size) {
  session_devices_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentera.protobuf.JoinSessionEvent.session_devices)
}
inline std::string* JoinSessionEvent::_internal_add_session_devices() {
  return session_devices_.Add();
}
inline void JoinSessionEvent::add_session_devices(const std::string& value) {
  session_devices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opentera.protobuf.JoinSessionEvent.session_devices)
}
inline void JoinSessionEvent::add_session_devices(std::string&& value) {
  session_devices_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opentera.protobuf.JoinSessionEvent.session_devices)
}
inline void JoinSessionEvent::add_session_devices(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  session_devices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opentera.protobuf.JoinSessionEvent.session_devices)
}
inline void JoinSessionEvent::add_session_devices(const char* value, size_t size) {
  session_devices_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opentera.protobuf.JoinSessionEvent.session_devices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JoinSessionEvent::session_devices() const {
  // @@protoc_insertion_point(field_list:opentera.protobuf.JoinSessionEvent.session_devices)
  return session_devices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JoinSessionEvent::mutable_session_devices() {
  // @@protoc_insertion_point(field_mutable_list:opentera.protobuf.JoinSessionEvent.session_devices)
  return &session_devices_;
}

// string join_msg = 7;
inline void JoinSessionEvent::clear_join_msg() {
  join_msg_.ClearToEmpty();
}
inline const std::string& JoinSessionEvent::join_msg() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.JoinSessionEvent.join_msg)
  return _internal_join_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinSessionEvent::set_join_msg(ArgT0&& arg0, ArgT... args) {
 
 join_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.JoinSessionEvent.join_msg)
}
inline std::string* JoinSessionEvent::mutable_join_msg() {
  std::string* _s = _internal_mutable_join_msg();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.JoinSessionEvent.join_msg)
  return _s;
}
inline const std::string& JoinSessionEvent::_internal_join_msg() const {
  return join_msg_.Get();
}
inline void JoinSessionEvent::_internal_set_join_msg(const std::string& value) {
  
  join_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JoinSessionEvent::_internal_mutable_join_msg() {
  
  return join_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JoinSessionEvent::release_join_msg() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.JoinSessionEvent.join_msg)
  return join_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JoinSessionEvent::set_allocated_join_msg(std::string* join_msg) {
  if (join_msg != nullptr) {
    
  } else {
    
  }
  join_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), join_msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.JoinSessionEvent.join_msg)
}

// string session_parameters = 8;
inline void JoinSessionEvent::clear_session_parameters() {
  session_parameters_.ClearToEmpty();
}
inline const std::string& JoinSessionEvent::session_parameters() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.JoinSessionEvent.session_parameters)
  return _internal_session_parameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinSessionEvent::set_session_parameters(ArgT0&& arg0, ArgT... args) {
 
 session_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.JoinSessionEvent.session_parameters)
}
inline std::string* JoinSessionEvent::mutable_session_parameters() {
  std::string* _s = _internal_mutable_session_parameters();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.JoinSessionEvent.session_parameters)
  return _s;
}
inline const std::string& JoinSessionEvent::_internal_session_parameters() const {
  return session_parameters_.Get();
}
inline void JoinSessionEvent::_internal_set_session_parameters(const std::string& value) {
  
  session_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JoinSessionEvent::_internal_mutable_session_parameters() {
  
  return session_parameters_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JoinSessionEvent::release_session_parameters() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.JoinSessionEvent.session_parameters)
  return session_parameters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JoinSessionEvent::set_allocated_session_parameters(std::string* session_parameters) {
  if (session_parameters != nullptr) {
    
  } else {
    
  }
  session_parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_parameters,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.JoinSessionEvent.session_parameters)
}

// string service_uuid = 9;
inline void JoinSessionEvent::clear_service_uuid() {
  service_uuid_.ClearToEmpty();
}
inline const std::string& JoinSessionEvent::service_uuid() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.JoinSessionEvent.service_uuid)
  return _internal_service_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinSessionEvent::set_service_uuid(ArgT0&& arg0, ArgT... args) {
 
 service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.JoinSessionEvent.service_uuid)
}
inline std::string* JoinSessionEvent::mutable_service_uuid() {
  std::string* _s = _internal_mutable_service_uuid();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.JoinSessionEvent.service_uuid)
  return _s;
}
inline const std::string& JoinSessionEvent::_internal_service_uuid() const {
  return service_uuid_.Get();
}
inline void JoinSessionEvent::_internal_set_service_uuid(const std::string& value) {
  
  service_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JoinSessionEvent::_internal_mutable_service_uuid() {
  
  return service_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JoinSessionEvent::release_service_uuid() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.JoinSessionEvent.service_uuid)
  return service_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JoinSessionEvent::set_allocated_service_uuid(std::string* service_uuid) {
  if (service_uuid != nullptr) {
    
  } else {
    
  }
  service_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_uuid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.JoinSessionEvent.service_uuid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace opentera

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_JoinSessionEvent_2eproto
