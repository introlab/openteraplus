// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TeraEvent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TeraEvent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TeraEvent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TeraEvent_2eproto OPENTERAMESSAGES_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct OPENTERAMESSAGES_EXPORT TableStruct_TeraEvent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
OPENTERAMESSAGES_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TeraEvent_2eproto;
namespace opentera {
namespace protobuf {
class TeraEvent;
struct TeraEventDefaultTypeInternal;
OPENTERAMESSAGES_EXPORT extern TeraEventDefaultTypeInternal _TeraEvent_default_instance_;
class TeraEvent_Header;
struct TeraEvent_HeaderDefaultTypeInternal;
OPENTERAMESSAGES_EXPORT extern TeraEvent_HeaderDefaultTypeInternal _TeraEvent_Header_default_instance_;
}  // namespace protobuf
}  // namespace opentera
PROTOBUF_NAMESPACE_OPEN
template<> OPENTERAMESSAGES_EXPORT ::opentera::protobuf::TeraEvent* Arena::CreateMaybeMessage<::opentera::protobuf::TeraEvent>(Arena*);
template<> OPENTERAMESSAGES_EXPORT ::opentera::protobuf::TeraEvent_Header* Arena::CreateMaybeMessage<::opentera::protobuf::TeraEvent_Header>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opentera {
namespace protobuf {

// ===================================================================

class OPENTERAMESSAGES_EXPORT TeraEvent_Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentera.protobuf.TeraEvent.Header) */ {
 public:
  inline TeraEvent_Header() : TeraEvent_Header(nullptr) {}
  ~TeraEvent_Header() override;
  explicit constexpr TeraEvent_Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeraEvent_Header(const TeraEvent_Header& from);
  TeraEvent_Header(TeraEvent_Header&& from) noexcept
    : TeraEvent_Header() {
    *this = ::std::move(from);
  }

  inline TeraEvent_Header& operator=(const TeraEvent_Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeraEvent_Header& operator=(TeraEvent_Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeraEvent_Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeraEvent_Header* internal_default_instance() {
    return reinterpret_cast<const TeraEvent_Header*>(
               &_TeraEvent_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TeraEvent_Header& a, TeraEvent_Header& b) {
    a.Swap(&b);
  }
  inline void Swap(TeraEvent_Header* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeraEvent_Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeraEvent_Header* New() const final {
    return new TeraEvent_Header();
  }

  TeraEvent_Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeraEvent_Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeraEvent_Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TeraEvent_Header& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeraEvent_Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentera.protobuf.TeraEvent.Header";
  }
  protected:
  explicit TeraEvent_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 3,
    kTimeFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // string topic = 3;
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_MUST_USE_RESULT std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // double time = 2;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:opentera.protobuf.TeraEvent.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  double time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TeraEvent_2eproto;
};
// -------------------------------------------------------------------

class OPENTERAMESSAGES_EXPORT TeraEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentera.protobuf.TeraEvent) */ {
 public:
  inline TeraEvent() : TeraEvent(nullptr) {}
  ~TeraEvent() override;
  explicit constexpr TeraEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeraEvent(const TeraEvent& from);
  TeraEvent(TeraEvent&& from) noexcept
    : TeraEvent() {
    *this = ::std::move(from);
  }

  inline TeraEvent& operator=(const TeraEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeraEvent& operator=(TeraEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeraEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeraEvent* internal_default_instance() {
    return reinterpret_cast<const TeraEvent*>(
               &_TeraEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TeraEvent& a, TeraEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TeraEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeraEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeraEvent* New() const final {
    return new TeraEvent();
  }

  TeraEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeraEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeraEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TeraEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeraEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentera.protobuf.TeraEvent";
  }
  protected:
  explicit TeraEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TeraEvent_Header Header;

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .google.protobuf.Any events = 2;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  PROTOBUF_NAMESPACE_ID::Any* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_events();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_events(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_events();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& events(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      events() const;

  // .opentera.protobuf.TeraEvent.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::opentera::protobuf::TeraEvent_Header& header() const;
  PROTOBUF_MUST_USE_RESULT ::opentera::protobuf::TeraEvent_Header* release_header();
  ::opentera::protobuf::TeraEvent_Header* mutable_header();
  void set_allocated_header(::opentera::protobuf::TeraEvent_Header* header);
  private:
  const ::opentera::protobuf::TeraEvent_Header& _internal_header() const;
  ::opentera::protobuf::TeraEvent_Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::opentera::protobuf::TeraEvent_Header* header);
  ::opentera::protobuf::TeraEvent_Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:opentera.protobuf.TeraEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > events_;
  ::opentera::protobuf::TeraEvent_Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TeraEvent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TeraEvent_Header

// uint32 version = 1;
inline void TeraEvent_Header::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeraEvent_Header::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeraEvent_Header::version() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.TeraEvent.Header.version)
  return _internal_version();
}
inline void TeraEvent_Header::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void TeraEvent_Header::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:opentera.protobuf.TeraEvent.Header.version)
}

// double time = 2;
inline void TeraEvent_Header::clear_time() {
  time_ = 0;
}
inline double TeraEvent_Header::_internal_time() const {
  return time_;
}
inline double TeraEvent_Header::time() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.TeraEvent.Header.time)
  return _internal_time();
}
inline void TeraEvent_Header::_internal_set_time(double value) {
  
  time_ = value;
}
inline void TeraEvent_Header::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:opentera.protobuf.TeraEvent.Header.time)
}

// string topic = 3;
inline void TeraEvent_Header::clear_topic() {
  topic_.ClearToEmpty();
}
inline const std::string& TeraEvent_Header::topic() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.TeraEvent.Header.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TeraEvent_Header::set_topic(ArgT0&& arg0, ArgT... args) {
 
 topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.TeraEvent.Header.topic)
}
inline std::string* TeraEvent_Header::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.TeraEvent.Header.topic)
  return _s;
}
inline const std::string& TeraEvent_Header::_internal_topic() const {
  return topic_.Get();
}
inline void TeraEvent_Header::_internal_set_topic(const std::string& value) {
  
  topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TeraEvent_Header::_internal_mutable_topic() {
  
  return topic_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TeraEvent_Header::release_topic() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.TeraEvent.Header.topic)
  return topic_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TeraEvent_Header::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.TeraEvent.Header.topic)
}

// -------------------------------------------------------------------

// TeraEvent

// .opentera.protobuf.TeraEvent.Header header = 1;
inline bool TeraEvent::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool TeraEvent::has_header() const {
  return _internal_has_header();
}
inline void TeraEvent::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::opentera::protobuf::TeraEvent_Header& TeraEvent::_internal_header() const {
  const ::opentera::protobuf::TeraEvent_Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentera::protobuf::TeraEvent_Header&>(
      ::opentera::protobuf::_TeraEvent_Header_default_instance_);
}
inline const ::opentera::protobuf::TeraEvent_Header& TeraEvent::header() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.TeraEvent.header)
  return _internal_header();
}
inline void TeraEvent::unsafe_arena_set_allocated_header(
    ::opentera::protobuf::TeraEvent_Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentera.protobuf.TeraEvent.header)
}
inline ::opentera::protobuf::TeraEvent_Header* TeraEvent::release_header() {
  
  ::opentera::protobuf::TeraEvent_Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opentera::protobuf::TeraEvent_Header* TeraEvent::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.TeraEvent.header)
  
  ::opentera::protobuf::TeraEvent_Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::opentera::protobuf::TeraEvent_Header* TeraEvent::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::opentera::protobuf::TeraEvent_Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::opentera::protobuf::TeraEvent_Header* TeraEvent::mutable_header() {
  ::opentera::protobuf::TeraEvent_Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.TeraEvent.header)
  return _msg;
}
inline void TeraEvent::set_allocated_header(::opentera::protobuf::TeraEvent_Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opentera::protobuf::TeraEvent_Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.TeraEvent.header)
}

// repeated .google.protobuf.Any events = 2;
inline int TeraEvent::_internal_events_size() const {
  return events_.size();
}
inline int TeraEvent::events_size() const {
  return _internal_events_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* TeraEvent::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.TeraEvent.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
TeraEvent::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:opentera.protobuf.TeraEvent.events)
  return &events_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& TeraEvent::_internal_events(int index) const {
  return events_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& TeraEvent::events(int index) const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.TeraEvent.events)
  return _internal_events(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* TeraEvent::_internal_add_events() {
  return events_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* TeraEvent::add_events() {
  PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:opentera.protobuf.TeraEvent.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
TeraEvent::events() const {
  // @@protoc_insertion_point(field_list:opentera.protobuf.TeraEvent.events)
  return events_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace opentera

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TeraEvent_2eproto
