// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RPCMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RPCMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RPCMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RPCMessage_2eproto OPENTERAMESSAGES_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct OPENTERAMESSAGES_EXPORT TableStruct_RPCMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
OPENTERAMESSAGES_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RPCMessage_2eproto;
namespace opentera {
namespace protobuf {
class RPCMessage;
struct RPCMessageDefaultTypeInternal;
OPENTERAMESSAGES_EXPORT extern RPCMessageDefaultTypeInternal _RPCMessage_default_instance_;
class Value;
struct ValueDefaultTypeInternal;
OPENTERAMESSAGES_EXPORT extern ValueDefaultTypeInternal _Value_default_instance_;
}  // namespace protobuf
}  // namespace opentera
PROTOBUF_NAMESPACE_OPEN
template<> OPENTERAMESSAGES_EXPORT ::opentera::protobuf::RPCMessage* Arena::CreateMaybeMessage<::opentera::protobuf::RPCMessage>(Arena*);
template<> OPENTERAMESSAGES_EXPORT ::opentera::protobuf::Value* Arena::CreateMaybeMessage<::opentera::protobuf::Value>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opentera {
namespace protobuf {

// ===================================================================

class OPENTERAMESSAGES_EXPORT Value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentera.protobuf.Value) */ {
 public:
  inline Value() : Value(nullptr) {}
  ~Value() override;
  explicit constexpr Value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Value(const Value& from);
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value& operator=(Value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Value& default_instance() {
    return *internal_default_instance();
  }
  enum ArgValueCase {
    kDoubleValue = 1,
    kFloatValue = 2,
    kIntValue = 3,
    kUintValue = 4,
    kBoolValue = 5,
    kBytesValue = 6,
    kStringValue = 7,
    ARG_VALUE_NOT_SET = 0,
  };

  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Value* New() const final {
    return new Value();
  }

  Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentera.protobuf.Value";
  }
  protected:
  explicit Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoubleValueFieldNumber = 1,
    kFloatValueFieldNumber = 2,
    kIntValueFieldNumber = 3,
    kUintValueFieldNumber = 4,
    kBoolValueFieldNumber = 5,
    kBytesValueFieldNumber = 6,
    kStringValueFieldNumber = 7,
  };
  // double double_value = 1;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // float float_value = 2;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // int64 int_value = 3;
  bool has_int_value() const;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int_value() const;
  void _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 uint_value = 4;
  bool has_uint_value() const;
  private:
  bool _internal_has_uint_value() const;
  public:
  void clear_uint_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint_value() const;
  void set_uint_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint_value() const;
  void _internal_set_uint_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool bool_value = 5;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // bytes bytes_value = 6;
  bool has_bytes_value() const;
  private:
  bool _internal_has_bytes_value() const;
  public:
  void clear_bytes_value();
  const std::string& bytes_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_bytes_value();
  void set_allocated_bytes_value(std::string* bytes_value);
  private:
  const std::string& _internal_bytes_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_value(const std::string& value);
  std::string* _internal_mutable_bytes_value();
  public:

  // string string_value = 7;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  void clear_arg_value();
  ArgValueCase arg_value_case() const;
  // @@protoc_insertion_point(class_scope:opentera.protobuf.Value)
 private:
  class _Internal;
  void set_has_double_value();
  void set_has_float_value();
  void set_has_int_value();
  void set_has_uint_value();
  void set_has_bool_value();
  void set_has_bytes_value();
  void set_has_string_value();

  inline bool has_arg_value() const;
  inline void clear_has_arg_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ArgValueUnion {
    constexpr ArgValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    double double_value_;
    float float_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 int_value_;
    ::PROTOBUF_NAMESPACE_ID::uint64 uint_value_;
    bool bool_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  } arg_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_RPCMessage_2eproto;
};
// -------------------------------------------------------------------

class OPENTERAMESSAGES_EXPORT RPCMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentera.protobuf.RPCMessage) */ {
 public:
  inline RPCMessage() : RPCMessage(nullptr) {}
  ~RPCMessage() override;
  explicit constexpr RPCMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RPCMessage(const RPCMessage& from);
  RPCMessage(RPCMessage&& from) noexcept
    : RPCMessage() {
    *this = ::std::move(from);
  }

  inline RPCMessage& operator=(const RPCMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCMessage& operator=(RPCMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RPCMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RPCMessage* internal_default_instance() {
    return reinterpret_cast<const RPCMessage*>(
               &_RPCMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RPCMessage& a, RPCMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RPCMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPCMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RPCMessage* New() const final {
    return new RPCMessage();
  }

  RPCMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RPCMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RPCMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RPCMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentera.protobuf.RPCMessage";
  }
  protected:
  explicit RPCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 5,
    kMethodFieldNumber = 1,
    kReplyToFieldNumber = 2,
    kIdFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // repeated .opentera.protobuf.Value args = 5;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  ::opentera::protobuf::Value* mutable_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentera::protobuf::Value >*
      mutable_args();
  private:
  const ::opentera::protobuf::Value& _internal_args(int index) const;
  ::opentera::protobuf::Value* _internal_add_args();
  public:
  const ::opentera::protobuf::Value& args(int index) const;
  ::opentera::protobuf::Value* add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentera::protobuf::Value >&
      args() const;

  // string method = 1;
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_MUST_USE_RESULT std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string reply_to = 2;
  void clear_reply_to();
  const std::string& reply_to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reply_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reply_to();
  PROTOBUF_MUST_USE_RESULT std::string* release_reply_to();
  void set_allocated_reply_to(std::string* reply_to);
  private:
  const std::string& _internal_reply_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply_to(const std::string& value);
  std::string* _internal_mutable_reply_to();
  public:

  // uint64 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double timestamp = 4;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // @@protoc_insertion_point(class_scope:opentera.protobuf.RPCMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentera::protobuf::Value > args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_to_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  double timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RPCMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Value

// double double_value = 1;
inline bool Value::_internal_has_double_value() const {
  return arg_value_case() == kDoubleValue;
}
inline bool Value::has_double_value() const {
  return _internal_has_double_value();
}
inline void Value::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void Value::clear_double_value() {
  if (_internal_has_double_value()) {
    arg_value_.double_value_ = 0;
    clear_has_arg_value();
  }
}
inline double Value::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return arg_value_.double_value_;
  }
  return 0;
}
inline void Value::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_arg_value();
    set_has_double_value();
  }
  arg_value_.double_value_ = value;
}
inline double Value::double_value() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.Value.double_value)
  return _internal_double_value();
}
inline void Value::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:opentera.protobuf.Value.double_value)
}

// float float_value = 2;
inline bool Value::_internal_has_float_value() const {
  return arg_value_case() == kFloatValue;
}
inline bool Value::has_float_value() const {
  return _internal_has_float_value();
}
inline void Value::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void Value::clear_float_value() {
  if (_internal_has_float_value()) {
    arg_value_.float_value_ = 0;
    clear_has_arg_value();
  }
}
inline float Value::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return arg_value_.float_value_;
  }
  return 0;
}
inline void Value::_internal_set_float_value(float value) {
  if (!_internal_has_float_value()) {
    clear_arg_value();
    set_has_float_value();
  }
  arg_value_.float_value_ = value;
}
inline float Value::float_value() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.Value.float_value)
  return _internal_float_value();
}
inline void Value::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:opentera.protobuf.Value.float_value)
}

// int64 int_value = 3;
inline bool Value::_internal_has_int_value() const {
  return arg_value_case() == kIntValue;
}
inline bool Value::has_int_value() const {
  return _internal_has_int_value();
}
inline void Value::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void Value::clear_int_value() {
  if (_internal_has_int_value()) {
    arg_value_.int_value_ = int64_t{0};
    clear_has_arg_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Value::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return arg_value_.int_value_;
  }
  return int64_t{0};
}
inline void Value::_internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_int_value()) {
    clear_arg_value();
    set_has_int_value();
  }
  arg_value_.int_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Value::int_value() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.Value.int_value)
  return _internal_int_value();
}
inline void Value::set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:opentera.protobuf.Value.int_value)
}

// uint64 uint_value = 4;
inline bool Value::_internal_has_uint_value() const {
  return arg_value_case() == kUintValue;
}
inline bool Value::has_uint_value() const {
  return _internal_has_uint_value();
}
inline void Value::set_has_uint_value() {
  _oneof_case_[0] = kUintValue;
}
inline void Value::clear_uint_value() {
  if (_internal_has_uint_value()) {
    arg_value_.uint_value_ = uint64_t{0u};
    clear_has_arg_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Value::_internal_uint_value() const {
  if (_internal_has_uint_value()) {
    return arg_value_.uint_value_;
  }
  return uint64_t{0u};
}
inline void Value::_internal_set_uint_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_uint_value()) {
    clear_arg_value();
    set_has_uint_value();
  }
  arg_value_.uint_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Value::uint_value() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.Value.uint_value)
  return _internal_uint_value();
}
inline void Value::set_uint_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uint_value(value);
  // @@protoc_insertion_point(field_set:opentera.protobuf.Value.uint_value)
}

// bool bool_value = 5;
inline bool Value::_internal_has_bool_value() const {
  return arg_value_case() == kBoolValue;
}
inline bool Value::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void Value::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void Value::clear_bool_value() {
  if (_internal_has_bool_value()) {
    arg_value_.bool_value_ = false;
    clear_has_arg_value();
  }
}
inline bool Value::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return arg_value_.bool_value_;
  }
  return false;
}
inline void Value::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_arg_value();
    set_has_bool_value();
  }
  arg_value_.bool_value_ = value;
}
inline bool Value::bool_value() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.Value.bool_value)
  return _internal_bool_value();
}
inline void Value::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:opentera.protobuf.Value.bool_value)
}

// bytes bytes_value = 6;
inline bool Value::_internal_has_bytes_value() const {
  return arg_value_case() == kBytesValue;
}
inline bool Value::has_bytes_value() const {
  return _internal_has_bytes_value();
}
inline void Value::set_has_bytes_value() {
  _oneof_case_[0] = kBytesValue;
}
inline void Value::clear_bytes_value() {
  if (_internal_has_bytes_value()) {
    arg_value_.bytes_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_arg_value();
  }
}
inline const std::string& Value::bytes_value() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.Value.bytes_value)
  return _internal_bytes_value();
}
template <typename ArgT0, typename... ArgT>
inline void Value::set_bytes_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bytes_value()) {
    clear_arg_value();
    set_has_bytes_value();
    arg_value_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  arg_value_.bytes_value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.Value.bytes_value)
}
inline std::string* Value::mutable_bytes_value() {
  std::string* _s = _internal_mutable_bytes_value();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.Value.bytes_value)
  return _s;
}
inline const std::string& Value::_internal_bytes_value() const {
  if (_internal_has_bytes_value()) {
    return arg_value_.bytes_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Value::_internal_set_bytes_value(const std::string& value) {
  if (!_internal_has_bytes_value()) {
    clear_arg_value();
    set_has_bytes_value();
    arg_value_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  arg_value_.bytes_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Value::_internal_mutable_bytes_value() {
  if (!_internal_has_bytes_value()) {
    clear_arg_value();
    set_has_bytes_value();
    arg_value_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return arg_value_.bytes_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Value::release_bytes_value() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.Value.bytes_value)
  if (_internal_has_bytes_value()) {
    clear_has_arg_value();
    return arg_value_.bytes_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Value::set_allocated_bytes_value(std::string* bytes_value) {
  if (has_arg_value()) {
    clear_arg_value();
  }
  if (bytes_value != nullptr) {
    set_has_bytes_value();
    arg_value_.bytes_value_.UnsafeSetDefault(bytes_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(bytes_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.Value.bytes_value)
}

// string string_value = 7;
inline bool Value::_internal_has_string_value() const {
  return arg_value_case() == kStringValue;
}
inline bool Value::has_string_value() const {
  return _internal_has_string_value();
}
inline void Value::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void Value::clear_string_value() {
  if (_internal_has_string_value()) {
    arg_value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_arg_value();
  }
}
inline const std::string& Value::string_value() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.Value.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void Value::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_arg_value();
    set_has_string_value();
    arg_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  arg_value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.Value.string_value)
}
inline std::string* Value::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.Value.string_value)
  return _s;
}
inline const std::string& Value::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return arg_value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Value::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_arg_value();
    set_has_string_value();
    arg_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  arg_value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Value::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_arg_value();
    set_has_string_value();
    arg_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return arg_value_.string_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Value::release_string_value() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.Value.string_value)
  if (_internal_has_string_value()) {
    clear_has_arg_value();
    return arg_value_.string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Value::set_allocated_string_value(std::string* string_value) {
  if (has_arg_value()) {
    clear_arg_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    arg_value_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.Value.string_value)
}

inline bool Value::has_arg_value() const {
  return arg_value_case() != ARG_VALUE_NOT_SET;
}
inline void Value::clear_has_arg_value() {
  _oneof_case_[0] = ARG_VALUE_NOT_SET;
}
inline Value::ArgValueCase Value::arg_value_case() const {
  return Value::ArgValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RPCMessage

// string method = 1;
inline void RPCMessage::clear_method() {
  method_.ClearToEmpty();
}
inline const std::string& RPCMessage::method() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.RPCMessage.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCMessage::set_method(ArgT0&& arg0, ArgT... args) {
 
 method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.RPCMessage.method)
}
inline std::string* RPCMessage::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.RPCMessage.method)
  return _s;
}
inline const std::string& RPCMessage::_internal_method() const {
  return method_.Get();
}
inline void RPCMessage::_internal_set_method(const std::string& value) {
  
  method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCMessage::_internal_mutable_method() {
  
  return method_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCMessage::release_method() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.RPCMessage.method)
  return method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RPCMessage::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.RPCMessage.method)
}

// string reply_to = 2;
inline void RPCMessage::clear_reply_to() {
  reply_to_.ClearToEmpty();
}
inline const std::string& RPCMessage::reply_to() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.RPCMessage.reply_to)
  return _internal_reply_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCMessage::set_reply_to(ArgT0&& arg0, ArgT... args) {
 
 reply_to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.RPCMessage.reply_to)
}
inline std::string* RPCMessage::mutable_reply_to() {
  std::string* _s = _internal_mutable_reply_to();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.RPCMessage.reply_to)
  return _s;
}
inline const std::string& RPCMessage::_internal_reply_to() const {
  return reply_to_.Get();
}
inline void RPCMessage::_internal_set_reply_to(const std::string& value) {
  
  reply_to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCMessage::_internal_mutable_reply_to() {
  
  return reply_to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCMessage::release_reply_to() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.RPCMessage.reply_to)
  return reply_to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RPCMessage::set_allocated_reply_to(std::string* reply_to) {
  if (reply_to != nullptr) {
    
  } else {
    
  }
  reply_to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reply_to,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.RPCMessage.reply_to)
}

// uint64 id = 3;
inline void RPCMessage::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RPCMessage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RPCMessage::id() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.RPCMessage.id)
  return _internal_id();
}
inline void RPCMessage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void RPCMessage::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:opentera.protobuf.RPCMessage.id)
}

// double timestamp = 4;
inline void RPCMessage::clear_timestamp() {
  timestamp_ = 0;
}
inline double RPCMessage::_internal_timestamp() const {
  return timestamp_;
}
inline double RPCMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.RPCMessage.timestamp)
  return _internal_timestamp();
}
inline void RPCMessage::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void RPCMessage::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:opentera.protobuf.RPCMessage.timestamp)
}

// repeated .opentera.protobuf.Value args = 5;
inline int RPCMessage::_internal_args_size() const {
  return args_.size();
}
inline int RPCMessage::args_size() const {
  return _internal_args_size();
}
inline void RPCMessage::clear_args() {
  args_.Clear();
}
inline ::opentera::protobuf::Value* RPCMessage::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.RPCMessage.args)
  return args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentera::protobuf::Value >*
RPCMessage::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:opentera.protobuf.RPCMessage.args)
  return &args_;
}
inline const ::opentera::protobuf::Value& RPCMessage::_internal_args(int index) const {
  return args_.Get(index);
}
inline const ::opentera::protobuf::Value& RPCMessage::args(int index) const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.RPCMessage.args)
  return _internal_args(index);
}
inline ::opentera::protobuf::Value* RPCMessage::_internal_add_args() {
  return args_.Add();
}
inline ::opentera::protobuf::Value* RPCMessage::add_args() {
  ::opentera::protobuf::Value* _add = _internal_add_args();
  // @@protoc_insertion_point(field_add:opentera.protobuf.RPCMessage.args)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentera::protobuf::Value >&
RPCMessage::args() const {
  // @@protoc_insertion_point(field_list:opentera.protobuf.RPCMessage.args)
  return args_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace opentera

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RPCMessage_2eproto
