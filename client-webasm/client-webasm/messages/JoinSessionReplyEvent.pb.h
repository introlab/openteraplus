// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JoinSessionReplyEvent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_JoinSessionReplyEvent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_JoinSessionReplyEvent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_JoinSessionReplyEvent_2eproto OPENTERAMESSAGES_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct OPENTERAMESSAGES_EXPORT TableStruct_JoinSessionReplyEvent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
OPENTERAMESSAGES_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_JoinSessionReplyEvent_2eproto;
namespace opentera {
namespace protobuf {
class JoinSessionReplyEvent;
struct JoinSessionReplyEventDefaultTypeInternal;
OPENTERAMESSAGES_EXPORT extern JoinSessionReplyEventDefaultTypeInternal _JoinSessionReplyEvent_default_instance_;
}  // namespace protobuf
}  // namespace opentera
PROTOBUF_NAMESPACE_OPEN
template<> OPENTERAMESSAGES_EXPORT ::opentera::protobuf::JoinSessionReplyEvent* Arena::CreateMaybeMessage<::opentera::protobuf::JoinSessionReplyEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opentera {
namespace protobuf {

enum JoinSessionReplyEvent_ReplyType : int {
  JoinSessionReplyEvent_ReplyType_REPLY_UNKNOWN = 0,
  JoinSessionReplyEvent_ReplyType_REPLY_ACCEPTED = 1,
  JoinSessionReplyEvent_ReplyType_REPLY_DENIED = 2,
  JoinSessionReplyEvent_ReplyType_REPLY_BUSY = 3,
  JoinSessionReplyEvent_ReplyType_REPLY_TIMEOUT = 4,
  JoinSessionReplyEvent_ReplyType_JoinSessionReplyEvent_ReplyType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  JoinSessionReplyEvent_ReplyType_JoinSessionReplyEvent_ReplyType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
OPENTERAMESSAGES_EXPORT bool JoinSessionReplyEvent_ReplyType_IsValid(int value);
constexpr JoinSessionReplyEvent_ReplyType JoinSessionReplyEvent_ReplyType_ReplyType_MIN = JoinSessionReplyEvent_ReplyType_REPLY_UNKNOWN;
constexpr JoinSessionReplyEvent_ReplyType JoinSessionReplyEvent_ReplyType_ReplyType_MAX = JoinSessionReplyEvent_ReplyType_REPLY_TIMEOUT;
constexpr int JoinSessionReplyEvent_ReplyType_ReplyType_ARRAYSIZE = JoinSessionReplyEvent_ReplyType_ReplyType_MAX + 1;

OPENTERAMESSAGES_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JoinSessionReplyEvent_ReplyType_descriptor();
template<typename T>
inline const std::string& JoinSessionReplyEvent_ReplyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JoinSessionReplyEvent_ReplyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JoinSessionReplyEvent_ReplyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JoinSessionReplyEvent_ReplyType_descriptor(), enum_t_value);
}
inline bool JoinSessionReplyEvent_ReplyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, JoinSessionReplyEvent_ReplyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JoinSessionReplyEvent_ReplyType>(
    JoinSessionReplyEvent_ReplyType_descriptor(), name, value);
}
// ===================================================================

class OPENTERAMESSAGES_EXPORT JoinSessionReplyEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentera.protobuf.JoinSessionReplyEvent) */ {
 public:
  inline JoinSessionReplyEvent() : JoinSessionReplyEvent(nullptr) {}
  ~JoinSessionReplyEvent() override;
  explicit constexpr JoinSessionReplyEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinSessionReplyEvent(const JoinSessionReplyEvent& from);
  JoinSessionReplyEvent(JoinSessionReplyEvent&& from) noexcept
    : JoinSessionReplyEvent() {
    *this = ::std::move(from);
  }

  inline JoinSessionReplyEvent& operator=(const JoinSessionReplyEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinSessionReplyEvent& operator=(JoinSessionReplyEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinSessionReplyEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinSessionReplyEvent* internal_default_instance() {
    return reinterpret_cast<const JoinSessionReplyEvent*>(
               &_JoinSessionReplyEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JoinSessionReplyEvent& a, JoinSessionReplyEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinSessionReplyEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinSessionReplyEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinSessionReplyEvent* New() const final {
    return new JoinSessionReplyEvent();
  }

  JoinSessionReplyEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinSessionReplyEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinSessionReplyEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JoinSessionReplyEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinSessionReplyEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentera.protobuf.JoinSessionReplyEvent";
  }
  protected:
  explicit JoinSessionReplyEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef JoinSessionReplyEvent_ReplyType ReplyType;
  static constexpr ReplyType REPLY_UNKNOWN =
    JoinSessionReplyEvent_ReplyType_REPLY_UNKNOWN;
  static constexpr ReplyType REPLY_ACCEPTED =
    JoinSessionReplyEvent_ReplyType_REPLY_ACCEPTED;
  static constexpr ReplyType REPLY_DENIED =
    JoinSessionReplyEvent_ReplyType_REPLY_DENIED;
  static constexpr ReplyType REPLY_BUSY =
    JoinSessionReplyEvent_ReplyType_REPLY_BUSY;
  static constexpr ReplyType REPLY_TIMEOUT =
    JoinSessionReplyEvent_ReplyType_REPLY_TIMEOUT;
  static inline bool ReplyType_IsValid(int value) {
    return JoinSessionReplyEvent_ReplyType_IsValid(value);
  }
  static constexpr ReplyType ReplyType_MIN =
    JoinSessionReplyEvent_ReplyType_ReplyType_MIN;
  static constexpr ReplyType ReplyType_MAX =
    JoinSessionReplyEvent_ReplyType_ReplyType_MAX;
  static constexpr int ReplyType_ARRAYSIZE =
    JoinSessionReplyEvent_ReplyType_ReplyType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReplyType_descriptor() {
    return JoinSessionReplyEvent_ReplyType_descriptor();
  }
  template<typename T>
  static inline const std::string& ReplyType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReplyType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReplyType_Name.");
    return JoinSessionReplyEvent_ReplyType_Name(enum_t_value);
  }
  static inline bool ReplyType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ReplyType* value) {
    return JoinSessionReplyEvent_ReplyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSessionUuidFieldNumber = 1,
    kUserUuidFieldNumber = 2,
    kParticipantUuidFieldNumber = 3,
    kDeviceUuidFieldNumber = 4,
    kReplyMsgFieldNumber = 6,
    kJoinReplyFieldNumber = 5,
  };
  // string session_uuid = 1;
  void clear_session_uuid();
  const std::string& session_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_uuid();
  PROTOBUF_MUST_USE_RESULT std::string* release_session_uuid();
  void set_allocated_session_uuid(std::string* session_uuid);
  private:
  const std::string& _internal_session_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_uuid(const std::string& value);
  std::string* _internal_mutable_session_uuid();
  public:

  // string user_uuid = 2;
  void clear_user_uuid();
  const std::string& user_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_uuid();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_uuid();
  void set_allocated_user_uuid(std::string* user_uuid);
  private:
  const std::string& _internal_user_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_uuid(const std::string& value);
  std::string* _internal_mutable_user_uuid();
  public:

  // string participant_uuid = 3;
  void clear_participant_uuid();
  const std::string& participant_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_participant_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_participant_uuid();
  PROTOBUF_MUST_USE_RESULT std::string* release_participant_uuid();
  void set_allocated_participant_uuid(std::string* participant_uuid);
  private:
  const std::string& _internal_participant_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant_uuid(const std::string& value);
  std::string* _internal_mutable_participant_uuid();
  public:

  // string device_uuid = 4;
  void clear_device_uuid();
  const std::string& device_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_uuid();
  PROTOBUF_MUST_USE_RESULT std::string* release_device_uuid();
  void set_allocated_device_uuid(std::string* device_uuid);
  private:
  const std::string& _internal_device_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_uuid(const std::string& value);
  std::string* _internal_mutable_device_uuid();
  public:

  // string reply_msg = 6;
  void clear_reply_msg();
  const std::string& reply_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reply_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reply_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_reply_msg();
  void set_allocated_reply_msg(std::string* reply_msg);
  private:
  const std::string& _internal_reply_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply_msg(const std::string& value);
  std::string* _internal_mutable_reply_msg();
  public:

  // .opentera.protobuf.JoinSessionReplyEvent.ReplyType join_reply = 5;
  void clear_join_reply();
  ::opentera::protobuf::JoinSessionReplyEvent_ReplyType join_reply() const;
  void set_join_reply(::opentera::protobuf::JoinSessionReplyEvent_ReplyType value);
  private:
  ::opentera::protobuf::JoinSessionReplyEvent_ReplyType _internal_join_reply() const;
  void _internal_set_join_reply(::opentera::protobuf::JoinSessionReplyEvent_ReplyType value);
  public:

  // @@protoc_insertion_point(class_scope:opentera.protobuf.JoinSessionReplyEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr participant_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_msg_;
  int join_reply_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JoinSessionReplyEvent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JoinSessionReplyEvent

// string session_uuid = 1;
inline void JoinSessionReplyEvent::clear_session_uuid() {
  session_uuid_.ClearToEmpty();
}
inline const std::string& JoinSessionReplyEvent::session_uuid() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.JoinSessionReplyEvent.session_uuid)
  return _internal_session_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinSessionReplyEvent::set_session_uuid(ArgT0&& arg0, ArgT... args) {
 
 session_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.JoinSessionReplyEvent.session_uuid)
}
inline std::string* JoinSessionReplyEvent::mutable_session_uuid() {
  std::string* _s = _internal_mutable_session_uuid();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.JoinSessionReplyEvent.session_uuid)
  return _s;
}
inline const std::string& JoinSessionReplyEvent::_internal_session_uuid() const {
  return session_uuid_.Get();
}
inline void JoinSessionReplyEvent::_internal_set_session_uuid(const std::string& value) {
  
  session_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JoinSessionReplyEvent::_internal_mutable_session_uuid() {
  
  return session_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JoinSessionReplyEvent::release_session_uuid() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.JoinSessionReplyEvent.session_uuid)
  return session_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JoinSessionReplyEvent::set_allocated_session_uuid(std::string* session_uuid) {
  if (session_uuid != nullptr) {
    
  } else {
    
  }
  session_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_uuid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.JoinSessionReplyEvent.session_uuid)
}

// string user_uuid = 2;
inline void JoinSessionReplyEvent::clear_user_uuid() {
  user_uuid_.ClearToEmpty();
}
inline const std::string& JoinSessionReplyEvent::user_uuid() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.JoinSessionReplyEvent.user_uuid)
  return _internal_user_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinSessionReplyEvent::set_user_uuid(ArgT0&& arg0, ArgT... args) {
 
 user_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.JoinSessionReplyEvent.user_uuid)
}
inline std::string* JoinSessionReplyEvent::mutable_user_uuid() {
  std::string* _s = _internal_mutable_user_uuid();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.JoinSessionReplyEvent.user_uuid)
  return _s;
}
inline const std::string& JoinSessionReplyEvent::_internal_user_uuid() const {
  return user_uuid_.Get();
}
inline void JoinSessionReplyEvent::_internal_set_user_uuid(const std::string& value) {
  
  user_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JoinSessionReplyEvent::_internal_mutable_user_uuid() {
  
  return user_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JoinSessionReplyEvent::release_user_uuid() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.JoinSessionReplyEvent.user_uuid)
  return user_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JoinSessionReplyEvent::set_allocated_user_uuid(std::string* user_uuid) {
  if (user_uuid != nullptr) {
    
  } else {
    
  }
  user_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_uuid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.JoinSessionReplyEvent.user_uuid)
}

// string participant_uuid = 3;
inline void JoinSessionReplyEvent::clear_participant_uuid() {
  participant_uuid_.ClearToEmpty();
}
inline const std::string& JoinSessionReplyEvent::participant_uuid() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.JoinSessionReplyEvent.participant_uuid)
  return _internal_participant_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinSessionReplyEvent::set_participant_uuid(ArgT0&& arg0, ArgT... args) {
 
 participant_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.JoinSessionReplyEvent.participant_uuid)
}
inline std::string* JoinSessionReplyEvent::mutable_participant_uuid() {
  std::string* _s = _internal_mutable_participant_uuid();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.JoinSessionReplyEvent.participant_uuid)
  return _s;
}
inline const std::string& JoinSessionReplyEvent::_internal_participant_uuid() const {
  return participant_uuid_.Get();
}
inline void JoinSessionReplyEvent::_internal_set_participant_uuid(const std::string& value) {
  
  participant_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JoinSessionReplyEvent::_internal_mutable_participant_uuid() {
  
  return participant_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JoinSessionReplyEvent::release_participant_uuid() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.JoinSessionReplyEvent.participant_uuid)
  return participant_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JoinSessionReplyEvent::set_allocated_participant_uuid(std::string* participant_uuid) {
  if (participant_uuid != nullptr) {
    
  } else {
    
  }
  participant_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), participant_uuid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.JoinSessionReplyEvent.participant_uuid)
}

// string device_uuid = 4;
inline void JoinSessionReplyEvent::clear_device_uuid() {
  device_uuid_.ClearToEmpty();
}
inline const std::string& JoinSessionReplyEvent::device_uuid() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.JoinSessionReplyEvent.device_uuid)
  return _internal_device_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinSessionReplyEvent::set_device_uuid(ArgT0&& arg0, ArgT... args) {
 
 device_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.JoinSessionReplyEvent.device_uuid)
}
inline std::string* JoinSessionReplyEvent::mutable_device_uuid() {
  std::string* _s = _internal_mutable_device_uuid();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.JoinSessionReplyEvent.device_uuid)
  return _s;
}
inline const std::string& JoinSessionReplyEvent::_internal_device_uuid() const {
  return device_uuid_.Get();
}
inline void JoinSessionReplyEvent::_internal_set_device_uuid(const std::string& value) {
  
  device_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JoinSessionReplyEvent::_internal_mutable_device_uuid() {
  
  return device_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JoinSessionReplyEvent::release_device_uuid() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.JoinSessionReplyEvent.device_uuid)
  return device_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JoinSessionReplyEvent::set_allocated_device_uuid(std::string* device_uuid) {
  if (device_uuid != nullptr) {
    
  } else {
    
  }
  device_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_uuid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.JoinSessionReplyEvent.device_uuid)
}

// .opentera.protobuf.JoinSessionReplyEvent.ReplyType join_reply = 5;
inline void JoinSessionReplyEvent::clear_join_reply() {
  join_reply_ = 0;
}
inline ::opentera::protobuf::JoinSessionReplyEvent_ReplyType JoinSessionReplyEvent::_internal_join_reply() const {
  return static_cast< ::opentera::protobuf::JoinSessionReplyEvent_ReplyType >(join_reply_);
}
inline ::opentera::protobuf::JoinSessionReplyEvent_ReplyType JoinSessionReplyEvent::join_reply() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.JoinSessionReplyEvent.join_reply)
  return _internal_join_reply();
}
inline void JoinSessionReplyEvent::_internal_set_join_reply(::opentera::protobuf::JoinSessionReplyEvent_ReplyType value) {
  
  join_reply_ = value;
}
inline void JoinSessionReplyEvent::set_join_reply(::opentera::protobuf::JoinSessionReplyEvent_ReplyType value) {
  _internal_set_join_reply(value);
  // @@protoc_insertion_point(field_set:opentera.protobuf.JoinSessionReplyEvent.join_reply)
}

// string reply_msg = 6;
inline void JoinSessionReplyEvent::clear_reply_msg() {
  reply_msg_.ClearToEmpty();
}
inline const std::string& JoinSessionReplyEvent::reply_msg() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.JoinSessionReplyEvent.reply_msg)
  return _internal_reply_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinSessionReplyEvent::set_reply_msg(ArgT0&& arg0, ArgT... args) {
 
 reply_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.JoinSessionReplyEvent.reply_msg)
}
inline std::string* JoinSessionReplyEvent::mutable_reply_msg() {
  std::string* _s = _internal_mutable_reply_msg();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.JoinSessionReplyEvent.reply_msg)
  return _s;
}
inline const std::string& JoinSessionReplyEvent::_internal_reply_msg() const {
  return reply_msg_.Get();
}
inline void JoinSessionReplyEvent::_internal_set_reply_msg(const std::string& value) {
  
  reply_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JoinSessionReplyEvent::_internal_mutable_reply_msg() {
  
  return reply_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JoinSessionReplyEvent::release_reply_msg() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.JoinSessionReplyEvent.reply_msg)
  return reply_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JoinSessionReplyEvent::set_allocated_reply_msg(std::string* reply_msg) {
  if (reply_msg != nullptr) {
    
  } else {
    
  }
  reply_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reply_msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.JoinSessionReplyEvent.reply_msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace opentera

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opentera::protobuf::JoinSessionReplyEvent_ReplyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opentera::protobuf::JoinSessionReplyEvent_ReplyType>() {
  return ::opentera::protobuf::JoinSessionReplyEvent_ReplyType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_JoinSessionReplyEvent_2eproto
