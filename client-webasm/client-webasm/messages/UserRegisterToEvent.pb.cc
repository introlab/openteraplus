// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserRegisterToEvent.proto

#include "UserRegisterToEvent.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opentera {
namespace protobuf {
constexpr UserRegisterToEvent::UserRegisterToEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_type_(0)

  , action_(0)
{}
struct UserRegisterToEventDefaultTypeInternal {
  constexpr UserRegisterToEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserRegisterToEventDefaultTypeInternal() {}
  union {
    UserRegisterToEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserRegisterToEventDefaultTypeInternal _UserRegisterToEvent_default_instance_;
}  // namespace protobuf
}  // namespace opentera
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_UserRegisterToEvent_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_UserRegisterToEvent_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_UserRegisterToEvent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_UserRegisterToEvent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentera::protobuf::UserRegisterToEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentera::protobuf::UserRegisterToEvent, event_type_),
  PROTOBUF_FIELD_OFFSET(::opentera::protobuf::UserRegisterToEvent, action_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::opentera::protobuf::UserRegisterToEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentera::protobuf::_UserRegisterToEvent_default_instance_),
};

const char descriptor_table_protodef_UserRegisterToEvent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031UserRegisterToEvent.proto\022\021opentera.pr"
  "otobuf\"\251\005\n\023UserRegisterToEvent\022D\n\nevent_"
  "type\030\001 \001(\01620.opentera.protobuf.UserRegis"
  "terToEvent.EventType\022=\n\006action\030\002 \001(\0162-.o"
  "pentera.protobuf.UserRegisterToEvent.Act"
  "ion\"\302\003\n\tEventType\022\021\n\rEVENT_UNKNOWN\020\000\022\030\n\024"
  "EVENT_USER_CONNECTED\020\001\022\033\n\027EVENT_USER_DIS"
  "CONNECTED\020\002\022\026\n\022EVENT_USER_DELETED\020\003\022\024\n\020E"
  "VENT_USER_ADDED\020\004\022\026\n\022EVENT_USER_UPDATED\020"
  "\005\022\037\n\033EVENT_PARTICIPANT_CONNECTED\020\006\022\"\n\036EV"
  "ENT_PARTICIPANT_DISCONNECTED\020\007\022\035\n\031EVENT_"
  "PARTICIPANT_DELETED\020\010\022\033\n\027EVENT_PARTICIPA"
  "NT_ADDED\020\t\022\035\n\031EVENT_PARTICIPANT_UPDATED\020"
  "\n\022\032\n\026EVENT_DEVICE_CONNECTED\020\013\022\035\n\031EVENT_D"
  "EVICE_DISCONNECTED\020\014\022\030\n\024EVENT_DEVICE_DEL"
  "ETED\020\r\022\026\n\022EVENT_DEVICE_ADDED\020\016\022\030\n\024EVENT_"
  "DEVICE_UPDATED\020\017\"H\n\006Action\022\022\n\016ACTION_UNK"
  "NOWN\020\000\022\023\n\017ACTION_REGISTER\020\001\022\025\n\021ACTION_UN"
  "REGISTER\020\002b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_UserRegisterToEvent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UserRegisterToEvent_2eproto = {
  false, false, 738, descriptor_table_protodef_UserRegisterToEvent_2eproto, "UserRegisterToEvent.proto", 
  &descriptor_table_UserRegisterToEvent_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_UserRegisterToEvent_2eproto::offsets,
  file_level_metadata_UserRegisterToEvent_2eproto, file_level_enum_descriptors_UserRegisterToEvent_2eproto, file_level_service_descriptors_UserRegisterToEvent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_UserRegisterToEvent_2eproto_getter() {
  return &descriptor_table_UserRegisterToEvent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_UserRegisterToEvent_2eproto(&descriptor_table_UserRegisterToEvent_2eproto);
namespace opentera {
namespace protobuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserRegisterToEvent_EventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_UserRegisterToEvent_2eproto);
  return file_level_enum_descriptors_UserRegisterToEvent_2eproto[0];
}
bool UserRegisterToEvent_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserRegisterToEvent_EventType UserRegisterToEvent::EVENT_UNKNOWN;
constexpr UserRegisterToEvent_EventType UserRegisterToEvent::EVENT_USER_CONNECTED;
constexpr UserRegisterToEvent_EventType UserRegisterToEvent::EVENT_USER_DISCONNECTED;
constexpr UserRegisterToEvent_EventType UserRegisterToEvent::EVENT_USER_DELETED;
constexpr UserRegisterToEvent_EventType UserRegisterToEvent::EVENT_USER_ADDED;
constexpr UserRegisterToEvent_EventType UserRegisterToEvent::EVENT_USER_UPDATED;
constexpr UserRegisterToEvent_EventType UserRegisterToEvent::EVENT_PARTICIPANT_CONNECTED;
constexpr UserRegisterToEvent_EventType UserRegisterToEvent::EVENT_PARTICIPANT_DISCONNECTED;
constexpr UserRegisterToEvent_EventType UserRegisterToEvent::EVENT_PARTICIPANT_DELETED;
constexpr UserRegisterToEvent_EventType UserRegisterToEvent::EVENT_PARTICIPANT_ADDED;
constexpr UserRegisterToEvent_EventType UserRegisterToEvent::EVENT_PARTICIPANT_UPDATED;
constexpr UserRegisterToEvent_EventType UserRegisterToEvent::EVENT_DEVICE_CONNECTED;
constexpr UserRegisterToEvent_EventType UserRegisterToEvent::EVENT_DEVICE_DISCONNECTED;
constexpr UserRegisterToEvent_EventType UserRegisterToEvent::EVENT_DEVICE_DELETED;
constexpr UserRegisterToEvent_EventType UserRegisterToEvent::EVENT_DEVICE_ADDED;
constexpr UserRegisterToEvent_EventType UserRegisterToEvent::EVENT_DEVICE_UPDATED;
constexpr UserRegisterToEvent_EventType UserRegisterToEvent::EventType_MIN;
constexpr UserRegisterToEvent_EventType UserRegisterToEvent::EventType_MAX;
constexpr int UserRegisterToEvent::EventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserRegisterToEvent_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_UserRegisterToEvent_2eproto);
  return file_level_enum_descriptors_UserRegisterToEvent_2eproto[1];
}
bool UserRegisterToEvent_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserRegisterToEvent_Action UserRegisterToEvent::ACTION_UNKNOWN;
constexpr UserRegisterToEvent_Action UserRegisterToEvent::ACTION_REGISTER;
constexpr UserRegisterToEvent_Action UserRegisterToEvent::ACTION_UNREGISTER;
constexpr UserRegisterToEvent_Action UserRegisterToEvent::Action_MIN;
constexpr UserRegisterToEvent_Action UserRegisterToEvent::Action_MAX;
constexpr int UserRegisterToEvent::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class UserRegisterToEvent::_Internal {
 public:
};

UserRegisterToEvent::UserRegisterToEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opentera.protobuf.UserRegisterToEvent)
}
UserRegisterToEvent::UserRegisterToEvent(const UserRegisterToEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_type_, &from.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&event_type_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:opentera.protobuf.UserRegisterToEvent)
}

inline void UserRegisterToEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&event_type_)) + sizeof(action_));
}

UserRegisterToEvent::~UserRegisterToEvent() {
  // @@protoc_insertion_point(destructor:opentera.protobuf.UserRegisterToEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserRegisterToEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserRegisterToEvent::ArenaDtor(void* object) {
  UserRegisterToEvent* _this = reinterpret_cast< UserRegisterToEvent* >(object);
  (void)_this;
}
void UserRegisterToEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserRegisterToEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserRegisterToEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:opentera.protobuf.UserRegisterToEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&event_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&event_type_)) + sizeof(action_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserRegisterToEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opentera.protobuf.UserRegisterToEvent.EventType event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_type(static_cast<::opentera::protobuf::UserRegisterToEvent_EventType>(val));
        } else goto handle_unusual;
        continue;
      // .opentera.protobuf.UserRegisterToEvent.Action action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::opentera::protobuf::UserRegisterToEvent_Action>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserRegisterToEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentera.protobuf.UserRegisterToEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opentera.protobuf.UserRegisterToEvent.EventType event_type = 1;
  if (this->_internal_event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_type(), target);
  }

  // .opentera.protobuf.UserRegisterToEvent.Action action = 2;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentera.protobuf.UserRegisterToEvent)
  return target;
}

size_t UserRegisterToEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentera.protobuf.UserRegisterToEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opentera.protobuf.UserRegisterToEvent.EventType event_type = 1;
  if (this->_internal_event_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  // .opentera.protobuf.UserRegisterToEvent.Action action = 2;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserRegisterToEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserRegisterToEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserRegisterToEvent::GetClassData() const { return &_class_data_; }

void UserRegisterToEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UserRegisterToEvent *>(to)->MergeFrom(
      static_cast<const UserRegisterToEvent &>(from));
}


void UserRegisterToEvent::MergeFrom(const UserRegisterToEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentera.protobuf.UserRegisterToEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_event_type() != 0) {
    _internal_set_event_type(from._internal_event_type());
  }
  if (from._internal_action() != 0) {
    _internal_set_action(from._internal_action());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserRegisterToEvent::CopyFrom(const UserRegisterToEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentera.protobuf.UserRegisterToEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRegisterToEvent::IsInitialized() const {
  return true;
}

void UserRegisterToEvent::InternalSwap(UserRegisterToEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserRegisterToEvent, action_)
      + sizeof(UserRegisterToEvent::action_)
      - PROTOBUF_FIELD_OFFSET(UserRegisterToEvent, event_type_)>(
          reinterpret_cast<char*>(&event_type_),
          reinterpret_cast<char*>(&other->event_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserRegisterToEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_UserRegisterToEvent_2eproto_getter, &descriptor_table_UserRegisterToEvent_2eproto_once,
      file_level_metadata_UserRegisterToEvent_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace opentera
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opentera::protobuf::UserRegisterToEvent* Arena::CreateMaybeMessage< ::opentera::protobuf::UserRegisterToEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentera::protobuf::UserRegisterToEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
