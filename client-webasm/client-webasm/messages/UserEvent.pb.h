// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserEvent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UserEvent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UserEvent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UserEvent_2eproto OPENTERAMESSAGES_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct OPENTERAMESSAGES_EXPORT TableStruct_UserEvent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
OPENTERAMESSAGES_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UserEvent_2eproto;
namespace opentera {
namespace protobuf {
class UserEvent;
struct UserEventDefaultTypeInternal;
OPENTERAMESSAGES_EXPORT extern UserEventDefaultTypeInternal _UserEvent_default_instance_;
}  // namespace protobuf
}  // namespace opentera
PROTOBUF_NAMESPACE_OPEN
template<> OPENTERAMESSAGES_EXPORT ::opentera::protobuf::UserEvent* Arena::CreateMaybeMessage<::opentera::protobuf::UserEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opentera {
namespace protobuf {

enum UserEvent_EventType : int {
  UserEvent_EventType_USER_UNKNOWN = 0,
  UserEvent_EventType_USER_CONNECTED = 1,
  UserEvent_EventType_USER_DISCONNECTED = 2,
  UserEvent_EventType_USER_DELETED = 3,
  UserEvent_EventType_USER_ADDED = 4,
  UserEvent_EventType_USER_UPDATED = 5,
  UserEvent_EventType_USER_JOINED_SESSION = 6,
  UserEvent_EventType_USER_LEFT_SESSION = 7,
  UserEvent_EventType_UserEvent_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserEvent_EventType_UserEvent_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
OPENTERAMESSAGES_EXPORT bool UserEvent_EventType_IsValid(int value);
constexpr UserEvent_EventType UserEvent_EventType_EventType_MIN = UserEvent_EventType_USER_UNKNOWN;
constexpr UserEvent_EventType UserEvent_EventType_EventType_MAX = UserEvent_EventType_USER_LEFT_SESSION;
constexpr int UserEvent_EventType_EventType_ARRAYSIZE = UserEvent_EventType_EventType_MAX + 1;

OPENTERAMESSAGES_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserEvent_EventType_descriptor();
template<typename T>
inline const std::string& UserEvent_EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserEvent_EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserEvent_EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserEvent_EventType_descriptor(), enum_t_value);
}
inline bool UserEvent_EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserEvent_EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserEvent_EventType>(
    UserEvent_EventType_descriptor(), name, value);
}
// ===================================================================

class OPENTERAMESSAGES_EXPORT UserEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentera.protobuf.UserEvent) */ {
 public:
  inline UserEvent() : UserEvent(nullptr) {}
  ~UserEvent() override;
  explicit constexpr UserEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserEvent(const UserEvent& from);
  UserEvent(UserEvent&& from) noexcept
    : UserEvent() {
    *this = ::std::move(from);
  }

  inline UserEvent& operator=(const UserEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEvent& operator=(UserEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserEvent* internal_default_instance() {
    return reinterpret_cast<const UserEvent*>(
               &_UserEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserEvent& a, UserEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(UserEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserEvent* New() const final {
    return new UserEvent();
  }

  UserEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentera.protobuf.UserEvent";
  }
  protected:
  explicit UserEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserEvent_EventType EventType;
  static constexpr EventType USER_UNKNOWN =
    UserEvent_EventType_USER_UNKNOWN;
  static constexpr EventType USER_CONNECTED =
    UserEvent_EventType_USER_CONNECTED;
  static constexpr EventType USER_DISCONNECTED =
    UserEvent_EventType_USER_DISCONNECTED;
  static constexpr EventType USER_DELETED =
    UserEvent_EventType_USER_DELETED;
  static constexpr EventType USER_ADDED =
    UserEvent_EventType_USER_ADDED;
  static constexpr EventType USER_UPDATED =
    UserEvent_EventType_USER_UPDATED;
  static constexpr EventType USER_JOINED_SESSION =
    UserEvent_EventType_USER_JOINED_SESSION;
  static constexpr EventType USER_LEFT_SESSION =
    UserEvent_EventType_USER_LEFT_SESSION;
  static inline bool EventType_IsValid(int value) {
    return UserEvent_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN =
    UserEvent_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX =
    UserEvent_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE =
    UserEvent_EventType_EventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EventType_descriptor() {
    return UserEvent_EventType_descriptor();
  }
  template<typename T>
  static inline const std::string& EventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventType_Name.");
    return UserEvent_EventType_Name(enum_t_value);
  }
  static inline bool EventType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EventType* value) {
    return UserEvent_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserUuidFieldNumber = 1,
    kUserFullnameFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // string user_uuid = 1;
  void clear_user_uuid();
  const std::string& user_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_uuid();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_uuid();
  void set_allocated_user_uuid(std::string* user_uuid);
  private:
  const std::string& _internal_user_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_uuid(const std::string& value);
  std::string* _internal_mutable_user_uuid();
  public:

  // string user_fullname = 3;
  void clear_user_fullname();
  const std::string& user_fullname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_fullname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_fullname();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_fullname();
  void set_allocated_user_fullname(std::string* user_fullname);
  private:
  const std::string& _internal_user_fullname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_fullname(const std::string& value);
  std::string* _internal_mutable_user_fullname();
  public:

  // .opentera.protobuf.UserEvent.EventType type = 2;
  void clear_type();
  ::opentera::protobuf::UserEvent_EventType type() const;
  void set_type(::opentera::protobuf::UserEvent_EventType value);
  private:
  ::opentera::protobuf::UserEvent_EventType _internal_type() const;
  void _internal_set_type(::opentera::protobuf::UserEvent_EventType value);
  public:

  // @@protoc_insertion_point(class_scope:opentera.protobuf.UserEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_fullname_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserEvent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserEvent

// string user_uuid = 1;
inline void UserEvent::clear_user_uuid() {
  user_uuid_.ClearToEmpty();
}
inline const std::string& UserEvent::user_uuid() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.UserEvent.user_uuid)
  return _internal_user_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserEvent::set_user_uuid(ArgT0&& arg0, ArgT... args) {
 
 user_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.UserEvent.user_uuid)
}
inline std::string* UserEvent::mutable_user_uuid() {
  std::string* _s = _internal_mutable_user_uuid();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.UserEvent.user_uuid)
  return _s;
}
inline const std::string& UserEvent::_internal_user_uuid() const {
  return user_uuid_.Get();
}
inline void UserEvent::_internal_set_user_uuid(const std::string& value) {
  
  user_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserEvent::_internal_mutable_user_uuid() {
  
  return user_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserEvent::release_user_uuid() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.UserEvent.user_uuid)
  return user_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserEvent::set_allocated_user_uuid(std::string* user_uuid) {
  if (user_uuid != nullptr) {
    
  } else {
    
  }
  user_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_uuid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.UserEvent.user_uuid)
}

// .opentera.protobuf.UserEvent.EventType type = 2;
inline void UserEvent::clear_type() {
  type_ = 0;
}
inline ::opentera::protobuf::UserEvent_EventType UserEvent::_internal_type() const {
  return static_cast< ::opentera::protobuf::UserEvent_EventType >(type_);
}
inline ::opentera::protobuf::UserEvent_EventType UserEvent::type() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.UserEvent.type)
  return _internal_type();
}
inline void UserEvent::_internal_set_type(::opentera::protobuf::UserEvent_EventType value) {
  
  type_ = value;
}
inline void UserEvent::set_type(::opentera::protobuf::UserEvent_EventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:opentera.protobuf.UserEvent.type)
}

// string user_fullname = 3;
inline void UserEvent::clear_user_fullname() {
  user_fullname_.ClearToEmpty();
}
inline const std::string& UserEvent::user_fullname() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.UserEvent.user_fullname)
  return _internal_user_fullname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserEvent::set_user_fullname(ArgT0&& arg0, ArgT... args) {
 
 user_fullname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.UserEvent.user_fullname)
}
inline std::string* UserEvent::mutable_user_fullname() {
  std::string* _s = _internal_mutable_user_fullname();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.UserEvent.user_fullname)
  return _s;
}
inline const std::string& UserEvent::_internal_user_fullname() const {
  return user_fullname_.Get();
}
inline void UserEvent::_internal_set_user_fullname(const std::string& value) {
  
  user_fullname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserEvent::_internal_mutable_user_fullname() {
  
  return user_fullname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserEvent::release_user_fullname() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.UserEvent.user_fullname)
  return user_fullname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserEvent::set_allocated_user_fullname(std::string* user_fullname) {
  if (user_fullname != nullptr) {
    
  } else {
    
  }
  user_fullname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_fullname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.UserEvent.user_fullname)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace opentera

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opentera::protobuf::UserEvent_EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opentera::protobuf::UserEvent_EventType>() {
  return ::opentera::protobuf::UserEvent_EventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UserEvent_2eproto
