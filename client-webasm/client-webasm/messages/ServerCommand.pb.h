// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerCommand.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ServerCommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ServerCommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ServerCommand_2eproto OPENTERAMESSAGES_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct OPENTERAMESSAGES_EXPORT TableStruct_ServerCommand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
OPENTERAMESSAGES_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServerCommand_2eproto;
namespace opentera {
namespace protobuf {
class ServerCommand;
struct ServerCommandDefaultTypeInternal;
OPENTERAMESSAGES_EXPORT extern ServerCommandDefaultTypeInternal _ServerCommand_default_instance_;
}  // namespace protobuf
}  // namespace opentera
PROTOBUF_NAMESPACE_OPEN
template<> OPENTERAMESSAGES_EXPORT ::opentera::protobuf::ServerCommand* Arena::CreateMaybeMessage<::opentera::protobuf::ServerCommand>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opentera {
namespace protobuf {

enum ServerCommand_CommandType : int {
  ServerCommand_CommandType_CMD_UNKNOWN = 0,
  ServerCommand_CommandType_CMD_REGISTER_DEVICE = 1,
  ServerCommand_CommandType_ServerCommand_CommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServerCommand_CommandType_ServerCommand_CommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
OPENTERAMESSAGES_EXPORT bool ServerCommand_CommandType_IsValid(int value);
constexpr ServerCommand_CommandType ServerCommand_CommandType_CommandType_MIN = ServerCommand_CommandType_CMD_UNKNOWN;
constexpr ServerCommand_CommandType ServerCommand_CommandType_CommandType_MAX = ServerCommand_CommandType_CMD_REGISTER_DEVICE;
constexpr int ServerCommand_CommandType_CommandType_ARRAYSIZE = ServerCommand_CommandType_CommandType_MAX + 1;

OPENTERAMESSAGES_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerCommand_CommandType_descriptor();
template<typename T>
inline const std::string& ServerCommand_CommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerCommand_CommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerCommand_CommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerCommand_CommandType_descriptor(), enum_t_value);
}
inline bool ServerCommand_CommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerCommand_CommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerCommand_CommandType>(
    ServerCommand_CommandType_descriptor(), name, value);
}
// ===================================================================

class OPENTERAMESSAGES_EXPORT ServerCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentera.protobuf.ServerCommand) */ {
 public:
  inline ServerCommand() : ServerCommand(nullptr) {}
  ~ServerCommand() override;
  explicit constexpr ServerCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerCommand(const ServerCommand& from);
  ServerCommand(ServerCommand&& from) noexcept
    : ServerCommand() {
    *this = ::std::move(from);
  }

  inline ServerCommand& operator=(const ServerCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerCommand& operator=(ServerCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerCommand* internal_default_instance() {
    return reinterpret_cast<const ServerCommand*>(
               &_ServerCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerCommand& a, ServerCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerCommand* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerCommand* New() const final {
    return new ServerCommand();
  }

  ServerCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServerCommand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentera.protobuf.ServerCommand";
  }
  protected:
  explicit ServerCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServerCommand_CommandType CommandType;
  static constexpr CommandType CMD_UNKNOWN =
    ServerCommand_CommandType_CMD_UNKNOWN;
  static constexpr CommandType CMD_REGISTER_DEVICE =
    ServerCommand_CommandType_CMD_REGISTER_DEVICE;
  static inline bool CommandType_IsValid(int value) {
    return ServerCommand_CommandType_IsValid(value);
  }
  static constexpr CommandType CommandType_MIN =
    ServerCommand_CommandType_CommandType_MIN;
  static constexpr CommandType CommandType_MAX =
    ServerCommand_CommandType_CommandType_MAX;
  static constexpr int CommandType_ARRAYSIZE =
    ServerCommand_CommandType_CommandType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CommandType_descriptor() {
    return ServerCommand_CommandType_descriptor();
  }
  template<typename T>
  static inline const std::string& CommandType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CommandType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CommandType_Name.");
    return ServerCommand_CommandType_Name(enum_t_value);
  }
  static inline bool CommandType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CommandType* value) {
    return ServerCommand_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .google.protobuf.Any data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Any* release_data();
  PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      PROTOBUF_NAMESPACE_ID::Any* data);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_data();

  // .opentera.protobuf.ServerCommand.CommandType type = 1;
  void clear_type();
  ::opentera::protobuf::ServerCommand_CommandType type() const;
  void set_type(::opentera::protobuf::ServerCommand_CommandType value);
  private:
  ::opentera::protobuf::ServerCommand_CommandType _internal_type() const;
  void _internal_set_type(::opentera::protobuf::ServerCommand_CommandType value);
  public:

  // @@protoc_insertion_point(class_scope:opentera.protobuf.ServerCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Any* data_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerCommand

// .opentera.protobuf.ServerCommand.CommandType type = 1;
inline void ServerCommand::clear_type() {
  type_ = 0;
}
inline ::opentera::protobuf::ServerCommand_CommandType ServerCommand::_internal_type() const {
  return static_cast< ::opentera::protobuf::ServerCommand_CommandType >(type_);
}
inline ::opentera::protobuf::ServerCommand_CommandType ServerCommand::type() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.ServerCommand.type)
  return _internal_type();
}
inline void ServerCommand::_internal_set_type(::opentera::protobuf::ServerCommand_CommandType value) {
  
  type_ = value;
}
inline void ServerCommand::set_type(::opentera::protobuf::ServerCommand_CommandType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:opentera.protobuf.ServerCommand.type)
}

// .google.protobuf.Any data = 2;
inline bool ServerCommand::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ServerCommand::has_data() const {
  return _internal_has_data();
}
inline const PROTOBUF_NAMESPACE_ID::Any& ServerCommand::_internal_data() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ServerCommand::data() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.ServerCommand.data)
  return _internal_data();
}
inline void ServerCommand::unsafe_arena_set_allocated_data(
    PROTOBUF_NAMESPACE_ID::Any* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentera.protobuf.ServerCommand.data)
}
inline PROTOBUF_NAMESPACE_ID::Any* ServerCommand::release_data() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ServerCommand::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.ServerCommand.data)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ServerCommand::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline PROTOBUF_NAMESPACE_ID::Any* ServerCommand::mutable_data() {
  PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.ServerCommand.data)
  return _msg;
}
inline void ServerCommand::set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.ServerCommand.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace opentera

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opentera::protobuf::ServerCommand_CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opentera::protobuf::ServerCommand_CommandType>() {
  return ::opentera::protobuf::ServerCommand_CommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ServerCommand_2eproto
