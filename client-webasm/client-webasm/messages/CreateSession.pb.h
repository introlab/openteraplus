// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CreateSession.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CreateSession_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CreateSession_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CreateSession_2eproto OPENTERAMESSAGES_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct OPENTERAMESSAGES_EXPORT TableStruct_CreateSession_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
OPENTERAMESSAGES_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CreateSession_2eproto;
namespace opentera {
namespace protobuf {
class CreateSession;
struct CreateSessionDefaultTypeInternal;
OPENTERAMESSAGES_EXPORT extern CreateSessionDefaultTypeInternal _CreateSession_default_instance_;
}  // namespace protobuf
}  // namespace opentera
PROTOBUF_NAMESPACE_OPEN
template<> OPENTERAMESSAGES_EXPORT ::opentera::protobuf::CreateSession* Arena::CreateMaybeMessage<::opentera::protobuf::CreateSession>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opentera {
namespace protobuf {

// ===================================================================

class OPENTERAMESSAGES_EXPORT CreateSession final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentera.protobuf.CreateSession) */ {
 public:
  inline CreateSession() : CreateSession(nullptr) {}
  ~CreateSession() override;
  explicit constexpr CreateSession(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSession(const CreateSession& from);
  CreateSession(CreateSession&& from) noexcept
    : CreateSession() {
    *this = ::std::move(from);
  }

  inline CreateSession& operator=(const CreateSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSession& operator=(CreateSession&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSession& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSession* internal_default_instance() {
    return reinterpret_cast<const CreateSession*>(
               &_CreateSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateSession& a, CreateSession& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSession* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSession* New() const final {
    return new CreateSession();
  }

  CreateSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSession>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSession& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateSession& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentera.protobuf.CreateSession";
  }
  protected:
  explicit CreateSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kCommandFieldNumber = 2,
    kReplyToFieldNumber = 3,
  };
  // string source = 1;
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_MUST_USE_RESULT std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string command = 2;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_MUST_USE_RESULT std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string reply_to = 3;
  void clear_reply_to();
  const std::string& reply_to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reply_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reply_to();
  PROTOBUF_MUST_USE_RESULT std::string* release_reply_to();
  void set_allocated_reply_to(std::string* reply_to);
  private:
  const std::string& _internal_reply_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply_to(const std::string& value);
  std::string* _internal_mutable_reply_to();
  public:

  // @@protoc_insertion_point(class_scope:opentera.protobuf.CreateSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CreateSession_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateSession

// string source = 1;
inline void CreateSession::clear_source() {
  source_.ClearToEmpty();
}
inline const std::string& CreateSession::source() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.CreateSession.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSession::set_source(ArgT0&& arg0, ArgT... args) {
 
 source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.CreateSession.source)
}
inline std::string* CreateSession::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.CreateSession.source)
  return _s;
}
inline const std::string& CreateSession::_internal_source() const {
  return source_.Get();
}
inline void CreateSession::_internal_set_source(const std::string& value) {
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateSession::_internal_mutable_source() {
  
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateSession::release_source() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.CreateSession.source)
  return source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateSession::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.CreateSession.source)
}

// string command = 2;
inline void CreateSession::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& CreateSession::command() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.CreateSession.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSession::set_command(ArgT0&& arg0, ArgT... args) {
 
 command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.CreateSession.command)
}
inline std::string* CreateSession::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.CreateSession.command)
  return _s;
}
inline const std::string& CreateSession::_internal_command() const {
  return command_.Get();
}
inline void CreateSession::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateSession::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateSession::release_command() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.CreateSession.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateSession::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.CreateSession.command)
}

// string reply_to = 3;
inline void CreateSession::clear_reply_to() {
  reply_to_.ClearToEmpty();
}
inline const std::string& CreateSession::reply_to() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.CreateSession.reply_to)
  return _internal_reply_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSession::set_reply_to(ArgT0&& arg0, ArgT... args) {
 
 reply_to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.CreateSession.reply_to)
}
inline std::string* CreateSession::mutable_reply_to() {
  std::string* _s = _internal_mutable_reply_to();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.CreateSession.reply_to)
  return _s;
}
inline const std::string& CreateSession::_internal_reply_to() const {
  return reply_to_.Get();
}
inline void CreateSession::_internal_set_reply_to(const std::string& value) {
  
  reply_to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateSession::_internal_mutable_reply_to() {
  
  return reply_to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateSession::release_reply_to() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.CreateSession.reply_to)
  return reply_to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateSession::set_allocated_reply_to(std::string* reply_to) {
  if (reply_to != nullptr) {
    
  } else {
    
  }
  reply_to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reply_to,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.CreateSession.reply_to)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace opentera

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CreateSession_2eproto
