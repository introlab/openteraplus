// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogEvent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LogEvent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LogEvent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LogEvent_2eproto OPENTERAMESSAGES_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct OPENTERAMESSAGES_EXPORT TableStruct_LogEvent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
OPENTERAMESSAGES_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LogEvent_2eproto;
namespace opentera {
namespace protobuf {
class LogEvent;
struct LogEventDefaultTypeInternal;
OPENTERAMESSAGES_EXPORT extern LogEventDefaultTypeInternal _LogEvent_default_instance_;
}  // namespace protobuf
}  // namespace opentera
PROTOBUF_NAMESPACE_OPEN
template<> OPENTERAMESSAGES_EXPORT ::opentera::protobuf::LogEvent* Arena::CreateMaybeMessage<::opentera::protobuf::LogEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opentera {
namespace protobuf {

enum LogEvent_LogLevel : int {
  LogEvent_LogLevel_LOGLEVEL_UNKNOWN = 0,
  LogEvent_LogLevel_LOGLEVEL_TRACE = 7,
  LogEvent_LogLevel_LOGLEVEL_DEBUG = 6,
  LogEvent_LogLevel_LOGLEVEL_INFO = 5,
  LogEvent_LogLevel_LOGLEVEL_WARNING = 4,
  LogEvent_LogLevel_LOGLEVEL_CRITICAL = 3,
  LogEvent_LogLevel_LOGLEVEL_ERROR = 2,
  LogEvent_LogLevel_LOGLEVEL_FATAL = 1,
  LogEvent_LogLevel_LogEvent_LogLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LogEvent_LogLevel_LogEvent_LogLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
OPENTERAMESSAGES_EXPORT bool LogEvent_LogLevel_IsValid(int value);
constexpr LogEvent_LogLevel LogEvent_LogLevel_LogLevel_MIN = LogEvent_LogLevel_LOGLEVEL_UNKNOWN;
constexpr LogEvent_LogLevel LogEvent_LogLevel_LogLevel_MAX = LogEvent_LogLevel_LOGLEVEL_TRACE;
constexpr int LogEvent_LogLevel_LogLevel_ARRAYSIZE = LogEvent_LogLevel_LogLevel_MAX + 1;

OPENTERAMESSAGES_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogEvent_LogLevel_descriptor();
template<typename T>
inline const std::string& LogEvent_LogLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogEvent_LogLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogEvent_LogLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogEvent_LogLevel_descriptor(), enum_t_value);
}
inline bool LogEvent_LogLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogEvent_LogLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogEvent_LogLevel>(
    LogEvent_LogLevel_descriptor(), name, value);
}
// ===================================================================

class OPENTERAMESSAGES_EXPORT LogEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentera.protobuf.LogEvent) */ {
 public:
  inline LogEvent() : LogEvent(nullptr) {}
  ~LogEvent() override;
  explicit constexpr LogEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogEvent(const LogEvent& from);
  LogEvent(LogEvent&& from) noexcept
    : LogEvent() {
    *this = ::std::move(from);
  }

  inline LogEvent& operator=(const LogEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEvent& operator=(LogEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogEvent* internal_default_instance() {
    return reinterpret_cast<const LogEvent*>(
               &_LogEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogEvent& a, LogEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogEvent* New() const final {
    return new LogEvent();
  }

  LogEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentera.protobuf.LogEvent";
  }
  protected:
  explicit LogEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LogEvent_LogLevel LogLevel;
  static constexpr LogLevel LOGLEVEL_UNKNOWN =
    LogEvent_LogLevel_LOGLEVEL_UNKNOWN;
  static constexpr LogLevel LOGLEVEL_TRACE =
    LogEvent_LogLevel_LOGLEVEL_TRACE;
  static constexpr LogLevel LOGLEVEL_DEBUG =
    LogEvent_LogLevel_LOGLEVEL_DEBUG;
  static constexpr LogLevel LOGLEVEL_INFO =
    LogEvent_LogLevel_LOGLEVEL_INFO;
  static constexpr LogLevel LOGLEVEL_WARNING =
    LogEvent_LogLevel_LOGLEVEL_WARNING;
  static constexpr LogLevel LOGLEVEL_CRITICAL =
    LogEvent_LogLevel_LOGLEVEL_CRITICAL;
  static constexpr LogLevel LOGLEVEL_ERROR =
    LogEvent_LogLevel_LOGLEVEL_ERROR;
  static constexpr LogLevel LOGLEVEL_FATAL =
    LogEvent_LogLevel_LOGLEVEL_FATAL;
  static inline bool LogLevel_IsValid(int value) {
    return LogEvent_LogLevel_IsValid(value);
  }
  static constexpr LogLevel LogLevel_MIN =
    LogEvent_LogLevel_LogLevel_MIN;
  static constexpr LogLevel LogLevel_MAX =
    LogEvent_LogLevel_LogLevel_MAX;
  static constexpr int LogLevel_ARRAYSIZE =
    LogEvent_LogLevel_LogLevel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LogLevel_descriptor() {
    return LogEvent_LogLevel_descriptor();
  }
  template<typename T>
  static inline const std::string& LogLevel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LogLevel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LogLevel_Name.");
    return LogEvent_LogLevel_Name(enum_t_value);
  }
  static inline bool LogLevel_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LogLevel* value) {
    return LogEvent_LogLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 3,
    kMessageFieldNumber = 4,
    kTimestampFieldNumber = 2,
    kLevelFieldNumber = 1,
  };
  // string sender = 3;
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_MUST_USE_RESULT std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // string message = 4;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // double timestamp = 2;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // .opentera.protobuf.LogEvent.LogLevel level = 1;
  void clear_level();
  ::opentera::protobuf::LogEvent_LogLevel level() const;
  void set_level(::opentera::protobuf::LogEvent_LogLevel value);
  private:
  ::opentera::protobuf::LogEvent_LogLevel _internal_level() const;
  void _internal_set_level(::opentera::protobuf::LogEvent_LogLevel value);
  public:

  // @@protoc_insertion_point(class_scope:opentera.protobuf.LogEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  double timestamp_;
  int level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LogEvent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogEvent

// .opentera.protobuf.LogEvent.LogLevel level = 1;
inline void LogEvent::clear_level() {
  level_ = 0;
}
inline ::opentera::protobuf::LogEvent_LogLevel LogEvent::_internal_level() const {
  return static_cast< ::opentera::protobuf::LogEvent_LogLevel >(level_);
}
inline ::opentera::protobuf::LogEvent_LogLevel LogEvent::level() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.LogEvent.level)
  return _internal_level();
}
inline void LogEvent::_internal_set_level(::opentera::protobuf::LogEvent_LogLevel value) {
  
  level_ = value;
}
inline void LogEvent::set_level(::opentera::protobuf::LogEvent_LogLevel value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:opentera.protobuf.LogEvent.level)
}

// double timestamp = 2;
inline void LogEvent::clear_timestamp() {
  timestamp_ = 0;
}
inline double LogEvent::_internal_timestamp() const {
  return timestamp_;
}
inline double LogEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.LogEvent.timestamp)
  return _internal_timestamp();
}
inline void LogEvent::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void LogEvent::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:opentera.protobuf.LogEvent.timestamp)
}

// string sender = 3;
inline void LogEvent::clear_sender() {
  sender_.ClearToEmpty();
}
inline const std::string& LogEvent::sender() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.LogEvent.sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogEvent::set_sender(ArgT0&& arg0, ArgT... args) {
 
 sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.LogEvent.sender)
}
inline std::string* LogEvent::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.LogEvent.sender)
  return _s;
}
inline const std::string& LogEvent::_internal_sender() const {
  return sender_.Get();
}
inline void LogEvent::_internal_set_sender(const std::string& value) {
  
  sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogEvent::_internal_mutable_sender() {
  
  return sender_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogEvent::release_sender() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.LogEvent.sender)
  return sender_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LogEvent::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.LogEvent.sender)
}

// string message = 4;
inline void LogEvent::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& LogEvent::message() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.LogEvent.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogEvent::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentera.protobuf.LogEvent.message)
}
inline std::string* LogEvent::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:opentera.protobuf.LogEvent.message)
  return _s;
}
inline const std::string& LogEvent::_internal_message() const {
  return message_.Get();
}
inline void LogEvent::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogEvent::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogEvent::release_message() {
  // @@protoc_insertion_point(field_release:opentera.protobuf.LogEvent.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LogEvent::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:opentera.protobuf.LogEvent.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace opentera

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opentera::protobuf::LogEvent_LogLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opentera::protobuf::LogEvent_LogLevel>() {
  return ::opentera::protobuf::LogEvent_LogLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LogEvent_2eproto
