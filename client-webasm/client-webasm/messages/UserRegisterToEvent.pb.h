// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserRegisterToEvent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UserRegisterToEvent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UserRegisterToEvent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UserRegisterToEvent_2eproto OPENTERAMESSAGES_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct OPENTERAMESSAGES_EXPORT TableStruct_UserRegisterToEvent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
OPENTERAMESSAGES_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UserRegisterToEvent_2eproto;
namespace opentera {
namespace protobuf {
class UserRegisterToEvent;
struct UserRegisterToEventDefaultTypeInternal;
OPENTERAMESSAGES_EXPORT extern UserRegisterToEventDefaultTypeInternal _UserRegisterToEvent_default_instance_;
}  // namespace protobuf
}  // namespace opentera
PROTOBUF_NAMESPACE_OPEN
template<> OPENTERAMESSAGES_EXPORT ::opentera::protobuf::UserRegisterToEvent* Arena::CreateMaybeMessage<::opentera::protobuf::UserRegisterToEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opentera {
namespace protobuf {

enum UserRegisterToEvent_EventType : int {
  UserRegisterToEvent_EventType_EVENT_UNKNOWN = 0,
  UserRegisterToEvent_EventType_EVENT_USER_CONNECTED = 1,
  UserRegisterToEvent_EventType_EVENT_USER_DISCONNECTED = 2,
  UserRegisterToEvent_EventType_EVENT_USER_DELETED = 3,
  UserRegisterToEvent_EventType_EVENT_USER_ADDED = 4,
  UserRegisterToEvent_EventType_EVENT_USER_UPDATED = 5,
  UserRegisterToEvent_EventType_EVENT_PARTICIPANT_CONNECTED = 6,
  UserRegisterToEvent_EventType_EVENT_PARTICIPANT_DISCONNECTED = 7,
  UserRegisterToEvent_EventType_EVENT_PARTICIPANT_DELETED = 8,
  UserRegisterToEvent_EventType_EVENT_PARTICIPANT_ADDED = 9,
  UserRegisterToEvent_EventType_EVENT_PARTICIPANT_UPDATED = 10,
  UserRegisterToEvent_EventType_EVENT_DEVICE_CONNECTED = 11,
  UserRegisterToEvent_EventType_EVENT_DEVICE_DISCONNECTED = 12,
  UserRegisterToEvent_EventType_EVENT_DEVICE_DELETED = 13,
  UserRegisterToEvent_EventType_EVENT_DEVICE_ADDED = 14,
  UserRegisterToEvent_EventType_EVENT_DEVICE_UPDATED = 15,
  UserRegisterToEvent_EventType_UserRegisterToEvent_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserRegisterToEvent_EventType_UserRegisterToEvent_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
OPENTERAMESSAGES_EXPORT bool UserRegisterToEvent_EventType_IsValid(int value);
constexpr UserRegisterToEvent_EventType UserRegisterToEvent_EventType_EventType_MIN = UserRegisterToEvent_EventType_EVENT_UNKNOWN;
constexpr UserRegisterToEvent_EventType UserRegisterToEvent_EventType_EventType_MAX = UserRegisterToEvent_EventType_EVENT_DEVICE_UPDATED;
constexpr int UserRegisterToEvent_EventType_EventType_ARRAYSIZE = UserRegisterToEvent_EventType_EventType_MAX + 1;

OPENTERAMESSAGES_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserRegisterToEvent_EventType_descriptor();
template<typename T>
inline const std::string& UserRegisterToEvent_EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserRegisterToEvent_EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserRegisterToEvent_EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserRegisterToEvent_EventType_descriptor(), enum_t_value);
}
inline bool UserRegisterToEvent_EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserRegisterToEvent_EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserRegisterToEvent_EventType>(
    UserRegisterToEvent_EventType_descriptor(), name, value);
}
enum UserRegisterToEvent_Action : int {
  UserRegisterToEvent_Action_ACTION_UNKNOWN = 0,
  UserRegisterToEvent_Action_ACTION_REGISTER = 1,
  UserRegisterToEvent_Action_ACTION_UNREGISTER = 2,
  UserRegisterToEvent_Action_UserRegisterToEvent_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserRegisterToEvent_Action_UserRegisterToEvent_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
OPENTERAMESSAGES_EXPORT bool UserRegisterToEvent_Action_IsValid(int value);
constexpr UserRegisterToEvent_Action UserRegisterToEvent_Action_Action_MIN = UserRegisterToEvent_Action_ACTION_UNKNOWN;
constexpr UserRegisterToEvent_Action UserRegisterToEvent_Action_Action_MAX = UserRegisterToEvent_Action_ACTION_UNREGISTER;
constexpr int UserRegisterToEvent_Action_Action_ARRAYSIZE = UserRegisterToEvent_Action_Action_MAX + 1;

OPENTERAMESSAGES_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserRegisterToEvent_Action_descriptor();
template<typename T>
inline const std::string& UserRegisterToEvent_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserRegisterToEvent_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserRegisterToEvent_Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserRegisterToEvent_Action_descriptor(), enum_t_value);
}
inline bool UserRegisterToEvent_Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserRegisterToEvent_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserRegisterToEvent_Action>(
    UserRegisterToEvent_Action_descriptor(), name, value);
}
// ===================================================================

class OPENTERAMESSAGES_EXPORT UserRegisterToEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentera.protobuf.UserRegisterToEvent) */ {
 public:
  inline UserRegisterToEvent() : UserRegisterToEvent(nullptr) {}
  ~UserRegisterToEvent() override;
  explicit constexpr UserRegisterToEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserRegisterToEvent(const UserRegisterToEvent& from);
  UserRegisterToEvent(UserRegisterToEvent&& from) noexcept
    : UserRegisterToEvent() {
    *this = ::std::move(from);
  }

  inline UserRegisterToEvent& operator=(const UserRegisterToEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRegisterToEvent& operator=(UserRegisterToEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRegisterToEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRegisterToEvent* internal_default_instance() {
    return reinterpret_cast<const UserRegisterToEvent*>(
               &_UserRegisterToEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserRegisterToEvent& a, UserRegisterToEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRegisterToEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRegisterToEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserRegisterToEvent* New() const final {
    return new UserRegisterToEvent();
  }

  UserRegisterToEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserRegisterToEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserRegisterToEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserRegisterToEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegisterToEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentera.protobuf.UserRegisterToEvent";
  }
  protected:
  explicit UserRegisterToEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserRegisterToEvent_EventType EventType;
  static constexpr EventType EVENT_UNKNOWN =
    UserRegisterToEvent_EventType_EVENT_UNKNOWN;
  static constexpr EventType EVENT_USER_CONNECTED =
    UserRegisterToEvent_EventType_EVENT_USER_CONNECTED;
  static constexpr EventType EVENT_USER_DISCONNECTED =
    UserRegisterToEvent_EventType_EVENT_USER_DISCONNECTED;
  static constexpr EventType EVENT_USER_DELETED =
    UserRegisterToEvent_EventType_EVENT_USER_DELETED;
  static constexpr EventType EVENT_USER_ADDED =
    UserRegisterToEvent_EventType_EVENT_USER_ADDED;
  static constexpr EventType EVENT_USER_UPDATED =
    UserRegisterToEvent_EventType_EVENT_USER_UPDATED;
  static constexpr EventType EVENT_PARTICIPANT_CONNECTED =
    UserRegisterToEvent_EventType_EVENT_PARTICIPANT_CONNECTED;
  static constexpr EventType EVENT_PARTICIPANT_DISCONNECTED =
    UserRegisterToEvent_EventType_EVENT_PARTICIPANT_DISCONNECTED;
  static constexpr EventType EVENT_PARTICIPANT_DELETED =
    UserRegisterToEvent_EventType_EVENT_PARTICIPANT_DELETED;
  static constexpr EventType EVENT_PARTICIPANT_ADDED =
    UserRegisterToEvent_EventType_EVENT_PARTICIPANT_ADDED;
  static constexpr EventType EVENT_PARTICIPANT_UPDATED =
    UserRegisterToEvent_EventType_EVENT_PARTICIPANT_UPDATED;
  static constexpr EventType EVENT_DEVICE_CONNECTED =
    UserRegisterToEvent_EventType_EVENT_DEVICE_CONNECTED;
  static constexpr EventType EVENT_DEVICE_DISCONNECTED =
    UserRegisterToEvent_EventType_EVENT_DEVICE_DISCONNECTED;
  static constexpr EventType EVENT_DEVICE_DELETED =
    UserRegisterToEvent_EventType_EVENT_DEVICE_DELETED;
  static constexpr EventType EVENT_DEVICE_ADDED =
    UserRegisterToEvent_EventType_EVENT_DEVICE_ADDED;
  static constexpr EventType EVENT_DEVICE_UPDATED =
    UserRegisterToEvent_EventType_EVENT_DEVICE_UPDATED;
  static inline bool EventType_IsValid(int value) {
    return UserRegisterToEvent_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN =
    UserRegisterToEvent_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX =
    UserRegisterToEvent_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE =
    UserRegisterToEvent_EventType_EventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EventType_descriptor() {
    return UserRegisterToEvent_EventType_descriptor();
  }
  template<typename T>
  static inline const std::string& EventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventType_Name.");
    return UserRegisterToEvent_EventType_Name(enum_t_value);
  }
  static inline bool EventType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EventType* value) {
    return UserRegisterToEvent_EventType_Parse(name, value);
  }

  typedef UserRegisterToEvent_Action Action;
  static constexpr Action ACTION_UNKNOWN =
    UserRegisterToEvent_Action_ACTION_UNKNOWN;
  static constexpr Action ACTION_REGISTER =
    UserRegisterToEvent_Action_ACTION_REGISTER;
  static constexpr Action ACTION_UNREGISTER =
    UserRegisterToEvent_Action_ACTION_UNREGISTER;
  static inline bool Action_IsValid(int value) {
    return UserRegisterToEvent_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    UserRegisterToEvent_Action_Action_MIN;
  static constexpr Action Action_MAX =
    UserRegisterToEvent_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    UserRegisterToEvent_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Action_descriptor() {
    return UserRegisterToEvent_Action_descriptor();
  }
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return UserRegisterToEvent_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Action* value) {
    return UserRegisterToEvent_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEventTypeFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // .opentera.protobuf.UserRegisterToEvent.EventType event_type = 1;
  void clear_event_type();
  ::opentera::protobuf::UserRegisterToEvent_EventType event_type() const;
  void set_event_type(::opentera::protobuf::UserRegisterToEvent_EventType value);
  private:
  ::opentera::protobuf::UserRegisterToEvent_EventType _internal_event_type() const;
  void _internal_set_event_type(::opentera::protobuf::UserRegisterToEvent_EventType value);
  public:

  // .opentera.protobuf.UserRegisterToEvent.Action action = 2;
  void clear_action();
  ::opentera::protobuf::UserRegisterToEvent_Action action() const;
  void set_action(::opentera::protobuf::UserRegisterToEvent_Action value);
  private:
  ::opentera::protobuf::UserRegisterToEvent_Action _internal_action() const;
  void _internal_set_action(::opentera::protobuf::UserRegisterToEvent_Action value);
  public:

  // @@protoc_insertion_point(class_scope:opentera.protobuf.UserRegisterToEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_type_;
  int action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserRegisterToEvent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserRegisterToEvent

// .opentera.protobuf.UserRegisterToEvent.EventType event_type = 1;
inline void UserRegisterToEvent::clear_event_type() {
  event_type_ = 0;
}
inline ::opentera::protobuf::UserRegisterToEvent_EventType UserRegisterToEvent::_internal_event_type() const {
  return static_cast< ::opentera::protobuf::UserRegisterToEvent_EventType >(event_type_);
}
inline ::opentera::protobuf::UserRegisterToEvent_EventType UserRegisterToEvent::event_type() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.UserRegisterToEvent.event_type)
  return _internal_event_type();
}
inline void UserRegisterToEvent::_internal_set_event_type(::opentera::protobuf::UserRegisterToEvent_EventType value) {
  
  event_type_ = value;
}
inline void UserRegisterToEvent::set_event_type(::opentera::protobuf::UserRegisterToEvent_EventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:opentera.protobuf.UserRegisterToEvent.event_type)
}

// .opentera.protobuf.UserRegisterToEvent.Action action = 2;
inline void UserRegisterToEvent::clear_action() {
  action_ = 0;
}
inline ::opentera::protobuf::UserRegisterToEvent_Action UserRegisterToEvent::_internal_action() const {
  return static_cast< ::opentera::protobuf::UserRegisterToEvent_Action >(action_);
}
inline ::opentera::protobuf::UserRegisterToEvent_Action UserRegisterToEvent::action() const {
  // @@protoc_insertion_point(field_get:opentera.protobuf.UserRegisterToEvent.action)
  return _internal_action();
}
inline void UserRegisterToEvent::_internal_set_action(::opentera::protobuf::UserRegisterToEvent_Action value) {
  
  action_ = value;
}
inline void UserRegisterToEvent::set_action(::opentera::protobuf::UserRegisterToEvent_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:opentera.protobuf.UserRegisterToEvent.action)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace opentera

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opentera::protobuf::UserRegisterToEvent_EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opentera::protobuf::UserRegisterToEvent_EventType>() {
  return ::opentera::protobuf::UserRegisterToEvent_EventType_descriptor();
}
template <> struct is_proto_enum< ::opentera::protobuf::UserRegisterToEvent_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opentera::protobuf::UserRegisterToEvent_Action>() {
  return ::opentera::protobuf::UserRegisterToEvent_Action_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UserRegisterToEvent_2eproto
