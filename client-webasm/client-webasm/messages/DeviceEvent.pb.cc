// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DeviceEvent.proto

#include "DeviceEvent.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opentera {
namespace protobuf {
constexpr DeviceEvent::DeviceEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct DeviceEventDefaultTypeInternal {
  constexpr DeviceEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceEventDefaultTypeInternal() {}
  union {
    DeviceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceEventDefaultTypeInternal _DeviceEvent_default_instance_;
}  // namespace protobuf
}  // namespace opentera
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DeviceEvent_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_DeviceEvent_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DeviceEvent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_DeviceEvent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentera::protobuf::DeviceEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentera::protobuf::DeviceEvent, device_uuid_),
  PROTOBUF_FIELD_OFFSET(::opentera::protobuf::DeviceEvent, type_),
  PROTOBUF_FIELD_OFFSET(::opentera::protobuf::DeviceEvent, device_name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::opentera::protobuf::DeviceEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentera::protobuf::_DeviceEvent_default_instance_),
};

const char descriptor_table_protodef_DeviceEvent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021DeviceEvent.proto\022\021opentera.protobuf\"\232"
  "\002\n\013DeviceEvent\022\023\n\013device_uuid\030\001 \001(\t\0226\n\004t"
  "ype\030\002 \001(\0162(.opentera.protobuf.DeviceEven"
  "t.EventType\022\023\n\013device_name\030\003 \001(\t\"\250\001\n\tEve"
  "ntType\022\022\n\016DEVICE_UNKNOWN\020\000\022\024\n\020DEVICE_CON"
  "NECTED\020\001\022\027\n\023DEVICE_DISCONNECTED\020\002\022\022\n\016DEV"
  "ICE_DELETED\020\003\022\020\n\014DEVICE_ADDED\020\004\022\031\n\025DEVIC"
  "E_JOINED_SESSION\020\005\022\027\n\023DEVICE_LEFT_SESSIO"
  "N\020\006b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DeviceEvent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DeviceEvent_2eproto = {
  false, false, 331, descriptor_table_protodef_DeviceEvent_2eproto, "DeviceEvent.proto", 
  &descriptor_table_DeviceEvent_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_DeviceEvent_2eproto::offsets,
  file_level_metadata_DeviceEvent_2eproto, file_level_enum_descriptors_DeviceEvent_2eproto, file_level_service_descriptors_DeviceEvent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_DeviceEvent_2eproto_getter() {
  return &descriptor_table_DeviceEvent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_DeviceEvent_2eproto(&descriptor_table_DeviceEvent_2eproto);
namespace opentera {
namespace protobuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceEvent_EventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DeviceEvent_2eproto);
  return file_level_enum_descriptors_DeviceEvent_2eproto[0];
}
bool DeviceEvent_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceEvent_EventType DeviceEvent::DEVICE_UNKNOWN;
constexpr DeviceEvent_EventType DeviceEvent::DEVICE_CONNECTED;
constexpr DeviceEvent_EventType DeviceEvent::DEVICE_DISCONNECTED;
constexpr DeviceEvent_EventType DeviceEvent::DEVICE_DELETED;
constexpr DeviceEvent_EventType DeviceEvent::DEVICE_ADDED;
constexpr DeviceEvent_EventType DeviceEvent::DEVICE_JOINED_SESSION;
constexpr DeviceEvent_EventType DeviceEvent::DEVICE_LEFT_SESSION;
constexpr DeviceEvent_EventType DeviceEvent::EventType_MIN;
constexpr DeviceEvent_EventType DeviceEvent::EventType_MAX;
constexpr int DeviceEvent::EventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class DeviceEvent::_Internal {
 public:
};

DeviceEvent::DeviceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opentera.protobuf.DeviceEvent)
}
DeviceEvent::DeviceEvent(const DeviceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_uuid().empty()) {
    device_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_uuid(), 
      GetArenaForAllocation());
  }
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_name().empty()) {
    device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_name(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:opentera.protobuf.DeviceEvent)
}

inline void DeviceEvent::SharedCtor() {
device_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

DeviceEvent::~DeviceEvent() {
  // @@protoc_insertion_point(destructor:opentera.protobuf.DeviceEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceEvent::ArenaDtor(void* object) {
  DeviceEvent* _this = reinterpret_cast< DeviceEvent* >(object);
  (void)_this;
}
void DeviceEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:opentera.protobuf.DeviceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_uuid_.ClearToEmpty();
  device_name_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string device_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentera.protobuf.DeviceEvent.device_uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentera.protobuf.DeviceEvent.EventType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opentera::protobuf::DeviceEvent_EventType>(val));
        } else goto handle_unusual;
        continue;
      // string device_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentera.protobuf.DeviceEvent.device_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentera.protobuf.DeviceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_uuid = 1;
  if (!this->_internal_device_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_uuid().data(), static_cast<int>(this->_internal_device_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentera.protobuf.DeviceEvent.device_uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_uuid(), target);
  }

  // .opentera.protobuf.DeviceEvent.EventType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string device_name = 3;
  if (!this->_internal_device_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentera.protobuf.DeviceEvent.device_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentera.protobuf.DeviceEvent)
  return target;
}

size_t DeviceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentera.protobuf.DeviceEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_uuid = 1;
  if (!this->_internal_device_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_uuid());
  }

  // string device_name = 3;
  if (!this->_internal_device_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_name());
  }

  // .opentera.protobuf.DeviceEvent.EventType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceEvent::GetClassData() const { return &_class_data_; }

void DeviceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeviceEvent *>(to)->MergeFrom(
      static_cast<const DeviceEvent &>(from));
}


void DeviceEvent::MergeFrom(const DeviceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentera.protobuf.DeviceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_uuid().empty()) {
    _internal_set_device_uuid(from._internal_device_uuid());
  }
  if (!from._internal_device_name().empty()) {
    _internal_set_device_name(from._internal_device_name());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceEvent::CopyFrom(const DeviceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentera.protobuf.DeviceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceEvent::IsInitialized() const {
  return true;
}

void DeviceEvent::InternalSwap(DeviceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_uuid_, GetArenaForAllocation(),
      &other->device_uuid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_name_, GetArenaForAllocation(),
      &other->device_name_, other->GetArenaForAllocation()
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DeviceEvent_2eproto_getter, &descriptor_table_DeviceEvent_2eproto_once,
      file_level_metadata_DeviceEvent_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace opentera
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opentera::protobuf::DeviceEvent* Arena::CreateMaybeMessage< ::opentera::protobuf::DeviceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentera::protobuf::DeviceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
